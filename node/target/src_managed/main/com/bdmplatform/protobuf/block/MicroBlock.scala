// Generated by the Scala Plugin for the Protocol Buffer Compiler.
// Do not edit!
//
// Protofile syntax: PROTO3

package com.bdmplatform.protobuf.block

@SerialVersionUID(0L)
final case class MicroBlock(
    version: _root_.scala.Int = 0,
    reference: _root_.com.google.protobuf.ByteString = _root_.com.google.protobuf.ByteString.EMPTY,
    updatedBlockSignature: _root_.com.google.protobuf.ByteString = _root_.com.google.protobuf.ByteString.EMPTY,
    senderPublicKey: _root_.com.google.protobuf.ByteString = _root_.com.google.protobuf.ByteString.EMPTY,
    transactions: _root_.scala.collection.Seq[com.bdmplatform.protobuf.transaction.SignedTransaction] = _root_.scala.collection.Seq.empty
    ) extends scalapb.GeneratedMessage with scalapb.Message[MicroBlock] with scalapb.lenses.Updatable[MicroBlock] {
    @transient
    private[this] var __serializedSizeCachedValue: _root_.scala.Int = 0
    private[this] def __computeSerializedValue(): _root_.scala.Int = {
      var __size = 0
      
      {
        val __value = version
        if (__value != 0) {
          __size += _root_.com.google.protobuf.CodedOutputStream.computeInt32Size(1, __value)
        }
      };
      
      {
        val __value = reference
        if (__value != _root_.com.google.protobuf.ByteString.EMPTY) {
          __size += _root_.com.google.protobuf.CodedOutputStream.computeBytesSize(2, __value)
        }
      };
      
      {
        val __value = updatedBlockSignature
        if (__value != _root_.com.google.protobuf.ByteString.EMPTY) {
          __size += _root_.com.google.protobuf.CodedOutputStream.computeBytesSize(3, __value)
        }
      };
      
      {
        val __value = senderPublicKey
        if (__value != _root_.com.google.protobuf.ByteString.EMPTY) {
          __size += _root_.com.google.protobuf.CodedOutputStream.computeBytesSize(4, __value)
        }
      };
      transactions.foreach { __item =>
        val __value = __item
        __size += 1 + _root_.com.google.protobuf.CodedOutputStream.computeUInt32SizeNoTag(__value.serializedSize) + __value.serializedSize
      }
      __size
    }
    final override def serializedSize: _root_.scala.Int = {
      var read = __serializedSizeCachedValue
      if (read == 0) {
        read = __computeSerializedValue()
        __serializedSizeCachedValue = read
      }
      read
    }
    def writeTo(`_output__`: _root_.com.google.protobuf.CodedOutputStream): _root_.scala.Unit = {
      {
        val __v = version
        if (__v != 0) {
          _output__.writeInt32(1, __v)
        }
      };
      {
        val __v = reference
        if (__v != _root_.com.google.protobuf.ByteString.EMPTY) {
          _output__.writeBytes(2, __v)
        }
      };
      {
        val __v = updatedBlockSignature
        if (__v != _root_.com.google.protobuf.ByteString.EMPTY) {
          _output__.writeBytes(3, __v)
        }
      };
      {
        val __v = senderPublicKey
        if (__v != _root_.com.google.protobuf.ByteString.EMPTY) {
          _output__.writeBytes(4, __v)
        }
      };
      transactions.foreach { __v =>
        val __m = __v
        _output__.writeTag(5, 2)
        _output__.writeUInt32NoTag(__m.serializedSize)
        __m.writeTo(_output__)
      };
    }
    def mergeFrom(`_input__`: _root_.com.google.protobuf.CodedInputStream): com.bdmplatform.protobuf.block.MicroBlock = {
      var __version = this.version
      var __reference = this.reference
      var __updatedBlockSignature = this.updatedBlockSignature
      var __senderPublicKey = this.senderPublicKey
      val __transactions = (_root_.scala.collection.immutable.Vector.newBuilder[com.bdmplatform.protobuf.transaction.SignedTransaction] ++= this.transactions)
      var _done__ = false
      while (!_done__) {
        val _tag__ = _input__.readTag()
        _tag__ match {
          case 0 => _done__ = true
          case 8 =>
            __version = _input__.readInt32()
          case 18 =>
            __reference = _input__.readBytes()
          case 26 =>
            __updatedBlockSignature = _input__.readBytes()
          case 34 =>
            __senderPublicKey = _input__.readBytes()
          case 42 =>
            __transactions += _root_.scalapb.LiteParser.readMessage(_input__, com.bdmplatform.protobuf.transaction.SignedTransaction.defaultInstance)
          case tag => _input__.skipField(tag)
        }
      }
      com.bdmplatform.protobuf.block.MicroBlock(
          version = __version,
          reference = __reference,
          updatedBlockSignature = __updatedBlockSignature,
          senderPublicKey = __senderPublicKey,
          transactions = __transactions.result()
      )
    }
    def withVersion(__v: _root_.scala.Int): MicroBlock = copy(version = __v)
    def withReference(__v: _root_.com.google.protobuf.ByteString): MicroBlock = copy(reference = __v)
    def withUpdatedBlockSignature(__v: _root_.com.google.protobuf.ByteString): MicroBlock = copy(updatedBlockSignature = __v)
    def withSenderPublicKey(__v: _root_.com.google.protobuf.ByteString): MicroBlock = copy(senderPublicKey = __v)
    def clearTransactions = copy(transactions = _root_.scala.collection.Seq.empty)
    def addTransactions(__vs: com.bdmplatform.protobuf.transaction.SignedTransaction*): MicroBlock = addAllTransactions(__vs)
    def addAllTransactions(__vs: TraversableOnce[com.bdmplatform.protobuf.transaction.SignedTransaction]): MicroBlock = copy(transactions = transactions ++ __vs)
    def withTransactions(__v: _root_.scala.collection.Seq[com.bdmplatform.protobuf.transaction.SignedTransaction]): MicroBlock = copy(transactions = __v)
    def getFieldByNumber(__fieldNumber: _root_.scala.Int): _root_.scala.Any = {
      (__fieldNumber: @_root_.scala.unchecked) match {
        case 1 => {
          val __t = version
          if (__t != 0) __t else null
        }
        case 2 => {
          val __t = reference
          if (__t != _root_.com.google.protobuf.ByteString.EMPTY) __t else null
        }
        case 3 => {
          val __t = updatedBlockSignature
          if (__t != _root_.com.google.protobuf.ByteString.EMPTY) __t else null
        }
        case 4 => {
          val __t = senderPublicKey
          if (__t != _root_.com.google.protobuf.ByteString.EMPTY) __t else null
        }
        case 5 => transactions
      }
    }
    def getField(__field: _root_.scalapb.descriptors.FieldDescriptor): _root_.scalapb.descriptors.PValue = {
      _root_.scala.Predef.require(__field.containingMessage eq companion.scalaDescriptor)
      (__field.number: @_root_.scala.unchecked) match {
        case 1 => _root_.scalapb.descriptors.PInt(version)
        case 2 => _root_.scalapb.descriptors.PByteString(reference)
        case 3 => _root_.scalapb.descriptors.PByteString(updatedBlockSignature)
        case 4 => _root_.scalapb.descriptors.PByteString(senderPublicKey)
        case 5 => _root_.scalapb.descriptors.PRepeated(transactions.map(_.toPMessage)(_root_.scala.collection.breakOut))
      }
    }
    def toProtoString: _root_.scala.Predef.String = _root_.scalapb.TextFormat.printToUnicodeString(this)
    def companion = com.bdmplatform.protobuf.block.MicroBlock
}

object MicroBlock extends scalapb.GeneratedMessageCompanion[com.bdmplatform.protobuf.block.MicroBlock] {
  implicit def messageCompanion: scalapb.GeneratedMessageCompanion[com.bdmplatform.protobuf.block.MicroBlock] = this
  def fromFieldsMap(__fieldsMap: scala.collection.immutable.Map[_root_.com.google.protobuf.Descriptors.FieldDescriptor, _root_.scala.Any]): com.bdmplatform.protobuf.block.MicroBlock = {
    _root_.scala.Predef.require(__fieldsMap.keys.forall(_.getContainingType() == javaDescriptor), "FieldDescriptor does not match message type.")
    val __fields = javaDescriptor.getFields
    com.bdmplatform.protobuf.block.MicroBlock(
      __fieldsMap.getOrElse(__fields.get(0), 0).asInstanceOf[_root_.scala.Int],
      __fieldsMap.getOrElse(__fields.get(1), _root_.com.google.protobuf.ByteString.EMPTY).asInstanceOf[_root_.com.google.protobuf.ByteString],
      __fieldsMap.getOrElse(__fields.get(2), _root_.com.google.protobuf.ByteString.EMPTY).asInstanceOf[_root_.com.google.protobuf.ByteString],
      __fieldsMap.getOrElse(__fields.get(3), _root_.com.google.protobuf.ByteString.EMPTY).asInstanceOf[_root_.com.google.protobuf.ByteString],
      __fieldsMap.getOrElse(__fields.get(4), Nil).asInstanceOf[_root_.scala.collection.Seq[com.bdmplatform.protobuf.transaction.SignedTransaction]]
    )
  }
  implicit def messageReads: _root_.scalapb.descriptors.Reads[com.bdmplatform.protobuf.block.MicroBlock] = _root_.scalapb.descriptors.Reads{
    case _root_.scalapb.descriptors.PMessage(__fieldsMap) =>
      _root_.scala.Predef.require(__fieldsMap.keys.forall(_.containingMessage == scalaDescriptor), "FieldDescriptor does not match message type.")
      com.bdmplatform.protobuf.block.MicroBlock(
        __fieldsMap.get(scalaDescriptor.findFieldByNumber(1).get).map(_.as[_root_.scala.Int]).getOrElse(0),
        __fieldsMap.get(scalaDescriptor.findFieldByNumber(2).get).map(_.as[_root_.com.google.protobuf.ByteString]).getOrElse(_root_.com.google.protobuf.ByteString.EMPTY),
        __fieldsMap.get(scalaDescriptor.findFieldByNumber(3).get).map(_.as[_root_.com.google.protobuf.ByteString]).getOrElse(_root_.com.google.protobuf.ByteString.EMPTY),
        __fieldsMap.get(scalaDescriptor.findFieldByNumber(4).get).map(_.as[_root_.com.google.protobuf.ByteString]).getOrElse(_root_.com.google.protobuf.ByteString.EMPTY),
        __fieldsMap.get(scalaDescriptor.findFieldByNumber(5).get).map(_.as[_root_.scala.collection.Seq[com.bdmplatform.protobuf.transaction.SignedTransaction]]).getOrElse(_root_.scala.collection.Seq.empty)
      )
    case _ => throw new RuntimeException("Expected PMessage")
  }
  def javaDescriptor: _root_.com.google.protobuf.Descriptors.Descriptor = BlockProto.javaDescriptor.getMessageTypes.get(1)
  def scalaDescriptor: _root_.scalapb.descriptors.Descriptor = BlockProto.scalaDescriptor.messages(1)
  def messageCompanionForFieldNumber(__number: _root_.scala.Int): _root_.scalapb.GeneratedMessageCompanion[_] = {
    var __out: _root_.scalapb.GeneratedMessageCompanion[_] = null
    (__number: @_root_.scala.unchecked) match {
      case 5 => __out = com.bdmplatform.protobuf.transaction.SignedTransaction
    }
    __out
  }
  lazy val nestedMessagesCompanions: Seq[_root_.scalapb.GeneratedMessageCompanion[_]] = Seq.empty
  def enumCompanionForFieldNumber(__fieldNumber: _root_.scala.Int): _root_.scalapb.GeneratedEnumCompanion[_] = throw new MatchError(__fieldNumber)
  lazy val defaultInstance = com.bdmplatform.protobuf.block.MicroBlock(
  )
  implicit class MicroBlockLens[UpperPB](_l: _root_.scalapb.lenses.Lens[UpperPB, com.bdmplatform.protobuf.block.MicroBlock]) extends _root_.scalapb.lenses.ObjectLens[UpperPB, com.bdmplatform.protobuf.block.MicroBlock](_l) {
    def version: _root_.scalapb.lenses.Lens[UpperPB, _root_.scala.Int] = field(_.version)((c_, f_) => c_.copy(version = f_))
    def reference: _root_.scalapb.lenses.Lens[UpperPB, _root_.com.google.protobuf.ByteString] = field(_.reference)((c_, f_) => c_.copy(reference = f_))
    def updatedBlockSignature: _root_.scalapb.lenses.Lens[UpperPB, _root_.com.google.protobuf.ByteString] = field(_.updatedBlockSignature)((c_, f_) => c_.copy(updatedBlockSignature = f_))
    def senderPublicKey: _root_.scalapb.lenses.Lens[UpperPB, _root_.com.google.protobuf.ByteString] = field(_.senderPublicKey)((c_, f_) => c_.copy(senderPublicKey = f_))
    def transactions: _root_.scalapb.lenses.Lens[UpperPB, _root_.scala.collection.Seq[com.bdmplatform.protobuf.transaction.SignedTransaction]] = field(_.transactions)((c_, f_) => c_.copy(transactions = f_))
  }
  final val VERSION_FIELD_NUMBER = 1
  final val REFERENCE_FIELD_NUMBER = 2
  final val UPDATED_BLOCK_SIGNATURE_FIELD_NUMBER = 3
  final val SENDER_PUBLIC_KEY_FIELD_NUMBER = 4
  final val TRANSACTIONS_FIELD_NUMBER = 5
  def of(
    version: _root_.scala.Int,
    reference: _root_.com.google.protobuf.ByteString,
    updatedBlockSignature: _root_.com.google.protobuf.ByteString,
    senderPublicKey: _root_.com.google.protobuf.ByteString,
    transactions: _root_.scala.collection.Seq[com.bdmplatform.protobuf.transaction.SignedTransaction]
  ): _root_.com.bdmplatform.protobuf.block.MicroBlock = _root_.com.bdmplatform.protobuf.block.MicroBlock(
    version,
    reference,
    updatedBlockSignature,
    senderPublicKey,
    transactions
  )
}
