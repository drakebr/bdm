// Generated by the Scala Plugin for the Protocol Buffer Compiler.
// Do not edit!
//
// Protofile syntax: PROTO3

package com.bdmplatform.protobuf.transaction

@SerialVersionUID(0L)
final case class ExchangeTransactionData(
    amount: _root_.scala.Long = 0L,
    price: _root_.scala.Long = 0L,
    buyMatcherFee: _root_.scala.Long = 0L,
    sellMatcherFee: _root_.scala.Long = 0L,
    orders: _root_.scala.collection.Seq[com.bdmplatform.protobuf.order.Order] = _root_.scala.collection.Seq.empty
    ) extends scalapb.GeneratedMessage with scalapb.Message[ExchangeTransactionData] with scalapb.lenses.Updatable[ExchangeTransactionData] {
    @transient
    private[this] var __serializedSizeCachedValue: _root_.scala.Int = 0
    private[this] def __computeSerializedValue(): _root_.scala.Int = {
      var __size = 0
      
      {
        val __value = amount
        if (__value != 0L) {
          __size += _root_.com.google.protobuf.CodedOutputStream.computeInt64Size(1, __value)
        }
      };
      
      {
        val __value = price
        if (__value != 0L) {
          __size += _root_.com.google.protobuf.CodedOutputStream.computeInt64Size(2, __value)
        }
      };
      
      {
        val __value = buyMatcherFee
        if (__value != 0L) {
          __size += _root_.com.google.protobuf.CodedOutputStream.computeInt64Size(3, __value)
        }
      };
      
      {
        val __value = sellMatcherFee
        if (__value != 0L) {
          __size += _root_.com.google.protobuf.CodedOutputStream.computeInt64Size(4, __value)
        }
      };
      orders.foreach { __item =>
        val __value = __item
        __size += 1 + _root_.com.google.protobuf.CodedOutputStream.computeUInt32SizeNoTag(__value.serializedSize) + __value.serializedSize
      }
      __size
    }
    final override def serializedSize: _root_.scala.Int = {
      var read = __serializedSizeCachedValue
      if (read == 0) {
        read = __computeSerializedValue()
        __serializedSizeCachedValue = read
      }
      read
    }
    def writeTo(`_output__`: _root_.com.google.protobuf.CodedOutputStream): _root_.scala.Unit = {
      {
        val __v = amount
        if (__v != 0L) {
          _output__.writeInt64(1, __v)
        }
      };
      {
        val __v = price
        if (__v != 0L) {
          _output__.writeInt64(2, __v)
        }
      };
      {
        val __v = buyMatcherFee
        if (__v != 0L) {
          _output__.writeInt64(3, __v)
        }
      };
      {
        val __v = sellMatcherFee
        if (__v != 0L) {
          _output__.writeInt64(4, __v)
        }
      };
      orders.foreach { __v =>
        val __m = __v
        _output__.writeTag(5, 2)
        _output__.writeUInt32NoTag(__m.serializedSize)
        __m.writeTo(_output__)
      };
    }
    def mergeFrom(`_input__`: _root_.com.google.protobuf.CodedInputStream): com.bdmplatform.protobuf.transaction.ExchangeTransactionData = {
      var __amount = this.amount
      var __price = this.price
      var __buyMatcherFee = this.buyMatcherFee
      var __sellMatcherFee = this.sellMatcherFee
      val __orders = (_root_.scala.collection.immutable.Vector.newBuilder[com.bdmplatform.protobuf.order.Order] ++= this.orders)
      var _done__ = false
      while (!_done__) {
        val _tag__ = _input__.readTag()
        _tag__ match {
          case 0 => _done__ = true
          case 8 =>
            __amount = _input__.readInt64()
          case 16 =>
            __price = _input__.readInt64()
          case 24 =>
            __buyMatcherFee = _input__.readInt64()
          case 32 =>
            __sellMatcherFee = _input__.readInt64()
          case 42 =>
            __orders += _root_.scalapb.LiteParser.readMessage(_input__, com.bdmplatform.protobuf.order.Order.defaultInstance)
          case tag => _input__.skipField(tag)
        }
      }
      com.bdmplatform.protobuf.transaction.ExchangeTransactionData(
          amount = __amount,
          price = __price,
          buyMatcherFee = __buyMatcherFee,
          sellMatcherFee = __sellMatcherFee,
          orders = __orders.result()
      )
    }
    def withAmount(__v: _root_.scala.Long): ExchangeTransactionData = copy(amount = __v)
    def withPrice(__v: _root_.scala.Long): ExchangeTransactionData = copy(price = __v)
    def withBuyMatcherFee(__v: _root_.scala.Long): ExchangeTransactionData = copy(buyMatcherFee = __v)
    def withSellMatcherFee(__v: _root_.scala.Long): ExchangeTransactionData = copy(sellMatcherFee = __v)
    def clearOrders = copy(orders = _root_.scala.collection.Seq.empty)
    def addOrders(__vs: com.bdmplatform.protobuf.order.Order*): ExchangeTransactionData = addAllOrders(__vs)
    def addAllOrders(__vs: TraversableOnce[com.bdmplatform.protobuf.order.Order]): ExchangeTransactionData = copy(orders = orders ++ __vs)
    def withOrders(__v: _root_.scala.collection.Seq[com.bdmplatform.protobuf.order.Order]): ExchangeTransactionData = copy(orders = __v)
    def getFieldByNumber(__fieldNumber: _root_.scala.Int): _root_.scala.Any = {
      (__fieldNumber: @_root_.scala.unchecked) match {
        case 1 => {
          val __t = amount
          if (__t != 0L) __t else null
        }
        case 2 => {
          val __t = price
          if (__t != 0L) __t else null
        }
        case 3 => {
          val __t = buyMatcherFee
          if (__t != 0L) __t else null
        }
        case 4 => {
          val __t = sellMatcherFee
          if (__t != 0L) __t else null
        }
        case 5 => orders
      }
    }
    def getField(__field: _root_.scalapb.descriptors.FieldDescriptor): _root_.scalapb.descriptors.PValue = {
      _root_.scala.Predef.require(__field.containingMessage eq companion.scalaDescriptor)
      (__field.number: @_root_.scala.unchecked) match {
        case 1 => _root_.scalapb.descriptors.PLong(amount)
        case 2 => _root_.scalapb.descriptors.PLong(price)
        case 3 => _root_.scalapb.descriptors.PLong(buyMatcherFee)
        case 4 => _root_.scalapb.descriptors.PLong(sellMatcherFee)
        case 5 => _root_.scalapb.descriptors.PRepeated(orders.map(_.toPMessage)(_root_.scala.collection.breakOut))
      }
    }
    def toProtoString: _root_.scala.Predef.String = _root_.scalapb.TextFormat.printToUnicodeString(this)
    def companion = com.bdmplatform.protobuf.transaction.ExchangeTransactionData
}

object ExchangeTransactionData extends scalapb.GeneratedMessageCompanion[com.bdmplatform.protobuf.transaction.ExchangeTransactionData] {
  implicit def messageCompanion: scalapb.GeneratedMessageCompanion[com.bdmplatform.protobuf.transaction.ExchangeTransactionData] = this
  def fromFieldsMap(__fieldsMap: scala.collection.immutable.Map[_root_.com.google.protobuf.Descriptors.FieldDescriptor, _root_.scala.Any]): com.bdmplatform.protobuf.transaction.ExchangeTransactionData = {
    _root_.scala.Predef.require(__fieldsMap.keys.forall(_.getContainingType() == javaDescriptor), "FieldDescriptor does not match message type.")
    val __fields = javaDescriptor.getFields
    com.bdmplatform.protobuf.transaction.ExchangeTransactionData(
      __fieldsMap.getOrElse(__fields.get(0), 0L).asInstanceOf[_root_.scala.Long],
      __fieldsMap.getOrElse(__fields.get(1), 0L).asInstanceOf[_root_.scala.Long],
      __fieldsMap.getOrElse(__fields.get(2), 0L).asInstanceOf[_root_.scala.Long],
      __fieldsMap.getOrElse(__fields.get(3), 0L).asInstanceOf[_root_.scala.Long],
      __fieldsMap.getOrElse(__fields.get(4), Nil).asInstanceOf[_root_.scala.collection.Seq[com.bdmplatform.protobuf.order.Order]]
    )
  }
  implicit def messageReads: _root_.scalapb.descriptors.Reads[com.bdmplatform.protobuf.transaction.ExchangeTransactionData] = _root_.scalapb.descriptors.Reads{
    case _root_.scalapb.descriptors.PMessage(__fieldsMap) =>
      _root_.scala.Predef.require(__fieldsMap.keys.forall(_.containingMessage == scalaDescriptor), "FieldDescriptor does not match message type.")
      com.bdmplatform.protobuf.transaction.ExchangeTransactionData(
        __fieldsMap.get(scalaDescriptor.findFieldByNumber(1).get).map(_.as[_root_.scala.Long]).getOrElse(0L),
        __fieldsMap.get(scalaDescriptor.findFieldByNumber(2).get).map(_.as[_root_.scala.Long]).getOrElse(0L),
        __fieldsMap.get(scalaDescriptor.findFieldByNumber(3).get).map(_.as[_root_.scala.Long]).getOrElse(0L),
        __fieldsMap.get(scalaDescriptor.findFieldByNumber(4).get).map(_.as[_root_.scala.Long]).getOrElse(0L),
        __fieldsMap.get(scalaDescriptor.findFieldByNumber(5).get).map(_.as[_root_.scala.collection.Seq[com.bdmplatform.protobuf.order.Order]]).getOrElse(_root_.scala.collection.Seq.empty)
      )
    case _ => throw new RuntimeException("Expected PMessage")
  }
  def javaDescriptor: _root_.com.google.protobuf.Descriptors.Descriptor = TransactionProto.javaDescriptor.getMessageTypes.get(16)
  def scalaDescriptor: _root_.scalapb.descriptors.Descriptor = TransactionProto.scalaDescriptor.messages(16)
  def messageCompanionForFieldNumber(__number: _root_.scala.Int): _root_.scalapb.GeneratedMessageCompanion[_] = {
    var __out: _root_.scalapb.GeneratedMessageCompanion[_] = null
    (__number: @_root_.scala.unchecked) match {
      case 5 => __out = com.bdmplatform.protobuf.order.Order
    }
    __out
  }
  lazy val nestedMessagesCompanions: Seq[_root_.scalapb.GeneratedMessageCompanion[_]] = Seq.empty
  def enumCompanionForFieldNumber(__fieldNumber: _root_.scala.Int): _root_.scalapb.GeneratedEnumCompanion[_] = throw new MatchError(__fieldNumber)
  lazy val defaultInstance = com.bdmplatform.protobuf.transaction.ExchangeTransactionData(
  )
  implicit class ExchangeTransactionDataLens[UpperPB](_l: _root_.scalapb.lenses.Lens[UpperPB, com.bdmplatform.protobuf.transaction.ExchangeTransactionData]) extends _root_.scalapb.lenses.ObjectLens[UpperPB, com.bdmplatform.protobuf.transaction.ExchangeTransactionData](_l) {
    def amount: _root_.scalapb.lenses.Lens[UpperPB, _root_.scala.Long] = field(_.amount)((c_, f_) => c_.copy(amount = f_))
    def price: _root_.scalapb.lenses.Lens[UpperPB, _root_.scala.Long] = field(_.price)((c_, f_) => c_.copy(price = f_))
    def buyMatcherFee: _root_.scalapb.lenses.Lens[UpperPB, _root_.scala.Long] = field(_.buyMatcherFee)((c_, f_) => c_.copy(buyMatcherFee = f_))
    def sellMatcherFee: _root_.scalapb.lenses.Lens[UpperPB, _root_.scala.Long] = field(_.sellMatcherFee)((c_, f_) => c_.copy(sellMatcherFee = f_))
    def orders: _root_.scalapb.lenses.Lens[UpperPB, _root_.scala.collection.Seq[com.bdmplatform.protobuf.order.Order]] = field(_.orders)((c_, f_) => c_.copy(orders = f_))
  }
  final val AMOUNT_FIELD_NUMBER = 1
  final val PRICE_FIELD_NUMBER = 2
  final val BUY_MATCHER_FEE_FIELD_NUMBER = 3
  final val SELL_MATCHER_FEE_FIELD_NUMBER = 4
  final val ORDERS_FIELD_NUMBER = 5
  def of(
    amount: _root_.scala.Long,
    price: _root_.scala.Long,
    buyMatcherFee: _root_.scala.Long,
    sellMatcherFee: _root_.scala.Long,
    orders: _root_.scala.collection.Seq[com.bdmplatform.protobuf.order.Order]
  ): _root_.com.bdmplatform.protobuf.transaction.ExchangeTransactionData = _root_.com.bdmplatform.protobuf.transaction.ExchangeTransactionData(
    amount,
    price,
    buyMatcherFee,
    sellMatcherFee,
    orders
  )
}
