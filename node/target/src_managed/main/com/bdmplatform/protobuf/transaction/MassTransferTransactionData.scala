// Generated by the Scala Plugin for the Protocol Buffer Compiler.
// Do not edit!
//
// Protofile syntax: PROTO3

package com.bdmplatform.protobuf.transaction

@SerialVersionUID(0L)
final case class MassTransferTransactionData(
    assetId: _root_.com.google.protobuf.ByteString = _root_.com.google.protobuf.ByteString.EMPTY,
    transfers: _root_.scala.collection.Seq[com.bdmplatform.protobuf.transaction.MassTransferTransactionData.Transfer] = _root_.scala.collection.Seq.empty,
    attachment: _root_.scala.Option[com.bdmplatform.protobuf.transaction.Attachment] = None
    ) extends scalapb.GeneratedMessage with scalapb.Message[MassTransferTransactionData] with scalapb.lenses.Updatable[MassTransferTransactionData] {
    @transient
    private[this] var __serializedSizeCachedValue: _root_.scala.Int = 0
    private[this] def __computeSerializedValue(): _root_.scala.Int = {
      var __size = 0
      
      {
        val __value = assetId
        if (__value != _root_.com.google.protobuf.ByteString.EMPTY) {
          __size += _root_.com.google.protobuf.CodedOutputStream.computeBytesSize(1, __value)
        }
      };
      transfers.foreach { __item =>
        val __value = __item
        __size += 1 + _root_.com.google.protobuf.CodedOutputStream.computeUInt32SizeNoTag(__value.serializedSize) + __value.serializedSize
      }
      if (attachment.isDefined) {
        val __value = attachment.get
        __size += 1 + _root_.com.google.protobuf.CodedOutputStream.computeUInt32SizeNoTag(__value.serializedSize) + __value.serializedSize
      };
      __size
    }
    final override def serializedSize: _root_.scala.Int = {
      var read = __serializedSizeCachedValue
      if (read == 0) {
        read = __computeSerializedValue()
        __serializedSizeCachedValue = read
      }
      read
    }
    def writeTo(`_output__`: _root_.com.google.protobuf.CodedOutputStream): _root_.scala.Unit = {
      {
        val __v = assetId
        if (__v != _root_.com.google.protobuf.ByteString.EMPTY) {
          _output__.writeBytes(1, __v)
        }
      };
      transfers.foreach { __v =>
        val __m = __v
        _output__.writeTag(2, 2)
        _output__.writeUInt32NoTag(__m.serializedSize)
        __m.writeTo(_output__)
      };
      attachment.foreach { __v =>
        val __m = __v
        _output__.writeTag(3, 2)
        _output__.writeUInt32NoTag(__m.serializedSize)
        __m.writeTo(_output__)
      };
    }
    def mergeFrom(`_input__`: _root_.com.google.protobuf.CodedInputStream): com.bdmplatform.protobuf.transaction.MassTransferTransactionData = {
      var __assetId = this.assetId
      val __transfers = (_root_.scala.collection.immutable.Vector.newBuilder[com.bdmplatform.protobuf.transaction.MassTransferTransactionData.Transfer] ++= this.transfers)
      var __attachment = this.attachment
      var _done__ = false
      while (!_done__) {
        val _tag__ = _input__.readTag()
        _tag__ match {
          case 0 => _done__ = true
          case 10 =>
            __assetId = _input__.readBytes()
          case 18 =>
            __transfers += _root_.scalapb.LiteParser.readMessage(_input__, com.bdmplatform.protobuf.transaction.MassTransferTransactionData.Transfer.defaultInstance)
          case 26 =>
            __attachment = Option(_root_.scalapb.LiteParser.readMessage(_input__, __attachment.getOrElse(com.bdmplatform.protobuf.transaction.Attachment.defaultInstance)))
          case tag => _input__.skipField(tag)
        }
      }
      com.bdmplatform.protobuf.transaction.MassTransferTransactionData(
          assetId = __assetId,
          transfers = __transfers.result(),
          attachment = __attachment
      )
    }
    def withAssetId(__v: _root_.com.google.protobuf.ByteString): MassTransferTransactionData = copy(assetId = __v)
    def clearTransfers = copy(transfers = _root_.scala.collection.Seq.empty)
    def addTransfers(__vs: com.bdmplatform.protobuf.transaction.MassTransferTransactionData.Transfer*): MassTransferTransactionData = addAllTransfers(__vs)
    def addAllTransfers(__vs: TraversableOnce[com.bdmplatform.protobuf.transaction.MassTransferTransactionData.Transfer]): MassTransferTransactionData = copy(transfers = transfers ++ __vs)
    def withTransfers(__v: _root_.scala.collection.Seq[com.bdmplatform.protobuf.transaction.MassTransferTransactionData.Transfer]): MassTransferTransactionData = copy(transfers = __v)
    def getAttachment: com.bdmplatform.protobuf.transaction.Attachment = attachment.getOrElse(com.bdmplatform.protobuf.transaction.Attachment.defaultInstance)
    def clearAttachment: MassTransferTransactionData = copy(attachment = None)
    def withAttachment(__v: com.bdmplatform.protobuf.transaction.Attachment): MassTransferTransactionData = copy(attachment = Option(__v))
    def getFieldByNumber(__fieldNumber: _root_.scala.Int): _root_.scala.Any = {
      (__fieldNumber: @_root_.scala.unchecked) match {
        case 1 => {
          val __t = assetId
          if (__t != _root_.com.google.protobuf.ByteString.EMPTY) __t else null
        }
        case 2 => transfers
        case 3 => attachment.orNull
      }
    }
    def getField(__field: _root_.scalapb.descriptors.FieldDescriptor): _root_.scalapb.descriptors.PValue = {
      _root_.scala.Predef.require(__field.containingMessage eq companion.scalaDescriptor)
      (__field.number: @_root_.scala.unchecked) match {
        case 1 => _root_.scalapb.descriptors.PByteString(assetId)
        case 2 => _root_.scalapb.descriptors.PRepeated(transfers.map(_.toPMessage)(_root_.scala.collection.breakOut))
        case 3 => attachment.map(_.toPMessage).getOrElse(_root_.scalapb.descriptors.PEmpty)
      }
    }
    def toProtoString: _root_.scala.Predef.String = _root_.scalapb.TextFormat.printToUnicodeString(this)
    def companion = com.bdmplatform.protobuf.transaction.MassTransferTransactionData
}

object MassTransferTransactionData extends scalapb.GeneratedMessageCompanion[com.bdmplatform.protobuf.transaction.MassTransferTransactionData] {
  implicit def messageCompanion: scalapb.GeneratedMessageCompanion[com.bdmplatform.protobuf.transaction.MassTransferTransactionData] = this
  def fromFieldsMap(__fieldsMap: scala.collection.immutable.Map[_root_.com.google.protobuf.Descriptors.FieldDescriptor, _root_.scala.Any]): com.bdmplatform.protobuf.transaction.MassTransferTransactionData = {
    _root_.scala.Predef.require(__fieldsMap.keys.forall(_.getContainingType() == javaDescriptor), "FieldDescriptor does not match message type.")
    val __fields = javaDescriptor.getFields
    com.bdmplatform.protobuf.transaction.MassTransferTransactionData(
      __fieldsMap.getOrElse(__fields.get(0), _root_.com.google.protobuf.ByteString.EMPTY).asInstanceOf[_root_.com.google.protobuf.ByteString],
      __fieldsMap.getOrElse(__fields.get(1), Nil).asInstanceOf[_root_.scala.collection.Seq[com.bdmplatform.protobuf.transaction.MassTransferTransactionData.Transfer]],
      __fieldsMap.get(__fields.get(2)).asInstanceOf[_root_.scala.Option[com.bdmplatform.protobuf.transaction.Attachment]]
    )
  }
  implicit def messageReads: _root_.scalapb.descriptors.Reads[com.bdmplatform.protobuf.transaction.MassTransferTransactionData] = _root_.scalapb.descriptors.Reads{
    case _root_.scalapb.descriptors.PMessage(__fieldsMap) =>
      _root_.scala.Predef.require(__fieldsMap.keys.forall(_.containingMessage == scalaDescriptor), "FieldDescriptor does not match message type.")
      com.bdmplatform.protobuf.transaction.MassTransferTransactionData(
        __fieldsMap.get(scalaDescriptor.findFieldByNumber(1).get).map(_.as[_root_.com.google.protobuf.ByteString]).getOrElse(_root_.com.google.protobuf.ByteString.EMPTY),
        __fieldsMap.get(scalaDescriptor.findFieldByNumber(2).get).map(_.as[_root_.scala.collection.Seq[com.bdmplatform.protobuf.transaction.MassTransferTransactionData.Transfer]]).getOrElse(_root_.scala.collection.Seq.empty),
        __fieldsMap.get(scalaDescriptor.findFieldByNumber(3).get).flatMap(_.as[_root_.scala.Option[com.bdmplatform.protobuf.transaction.Attachment]])
      )
    case _ => throw new RuntimeException("Expected PMessage")
  }
  def javaDescriptor: _root_.com.google.protobuf.Descriptors.Descriptor = TransactionProto.javaDescriptor.getMessageTypes.get(8)
  def scalaDescriptor: _root_.scalapb.descriptors.Descriptor = TransactionProto.scalaDescriptor.messages(8)
  def messageCompanionForFieldNumber(__number: _root_.scala.Int): _root_.scalapb.GeneratedMessageCompanion[_] = {
    var __out: _root_.scalapb.GeneratedMessageCompanion[_] = null
    (__number: @_root_.scala.unchecked) match {
      case 2 => __out = com.bdmplatform.protobuf.transaction.MassTransferTransactionData.Transfer
      case 3 => __out = com.bdmplatform.protobuf.transaction.Attachment
    }
    __out
  }
  lazy val nestedMessagesCompanions: Seq[_root_.scalapb.GeneratedMessageCompanion[_]] = Seq[_root_.scalapb.GeneratedMessageCompanion[_]](
    _root_.com.bdmplatform.protobuf.transaction.MassTransferTransactionData.Transfer
  )
  def enumCompanionForFieldNumber(__fieldNumber: _root_.scala.Int): _root_.scalapb.GeneratedEnumCompanion[_] = throw new MatchError(__fieldNumber)
  lazy val defaultInstance = com.bdmplatform.protobuf.transaction.MassTransferTransactionData(
  )
  @SerialVersionUID(0L)
  final case class Transfer(
      address: _root_.scala.Option[com.bdmplatform.protobuf.transaction.Recipient] = None,
      amount: _root_.scala.Long = 0L
      ) extends scalapb.GeneratedMessage with scalapb.Message[Transfer] with scalapb.lenses.Updatable[Transfer] {
      @transient
      private[this] var __serializedSizeCachedValue: _root_.scala.Int = 0
      private[this] def __computeSerializedValue(): _root_.scala.Int = {
        var __size = 0
        if (address.isDefined) {
          val __value = address.get
          __size += 1 + _root_.com.google.protobuf.CodedOutputStream.computeUInt32SizeNoTag(__value.serializedSize) + __value.serializedSize
        };
        
        {
          val __value = amount
          if (__value != 0L) {
            __size += _root_.com.google.protobuf.CodedOutputStream.computeInt64Size(2, __value)
          }
        };
        __size
      }
      final override def serializedSize: _root_.scala.Int = {
        var read = __serializedSizeCachedValue
        if (read == 0) {
          read = __computeSerializedValue()
          __serializedSizeCachedValue = read
        }
        read
      }
      def writeTo(`_output__`: _root_.com.google.protobuf.CodedOutputStream): _root_.scala.Unit = {
        address.foreach { __v =>
          val __m = __v
          _output__.writeTag(1, 2)
          _output__.writeUInt32NoTag(__m.serializedSize)
          __m.writeTo(_output__)
        };
        {
          val __v = amount
          if (__v != 0L) {
            _output__.writeInt64(2, __v)
          }
        };
      }
      def mergeFrom(`_input__`: _root_.com.google.protobuf.CodedInputStream): com.bdmplatform.protobuf.transaction.MassTransferTransactionData.Transfer = {
        var __address = this.address
        var __amount = this.amount
        var _done__ = false
        while (!_done__) {
          val _tag__ = _input__.readTag()
          _tag__ match {
            case 0 => _done__ = true
            case 10 =>
              __address = Option(_root_.scalapb.LiteParser.readMessage(_input__, __address.getOrElse(com.bdmplatform.protobuf.transaction.Recipient.defaultInstance)))
            case 16 =>
              __amount = _input__.readInt64()
            case tag => _input__.skipField(tag)
          }
        }
        com.bdmplatform.protobuf.transaction.MassTransferTransactionData.Transfer(
            address = __address,
            amount = __amount
        )
      }
      def getAddress: com.bdmplatform.protobuf.transaction.Recipient = address.getOrElse(com.bdmplatform.protobuf.transaction.Recipient.defaultInstance)
      def clearAddress: Transfer = copy(address = None)
      def withAddress(__v: com.bdmplatform.protobuf.transaction.Recipient): Transfer = copy(address = Option(__v))
      def withAmount(__v: _root_.scala.Long): Transfer = copy(amount = __v)
      def getFieldByNumber(__fieldNumber: _root_.scala.Int): _root_.scala.Any = {
        (__fieldNumber: @_root_.scala.unchecked) match {
          case 1 => address.orNull
          case 2 => {
            val __t = amount
            if (__t != 0L) __t else null
          }
        }
      }
      def getField(__field: _root_.scalapb.descriptors.FieldDescriptor): _root_.scalapb.descriptors.PValue = {
        _root_.scala.Predef.require(__field.containingMessage eq companion.scalaDescriptor)
        (__field.number: @_root_.scala.unchecked) match {
          case 1 => address.map(_.toPMessage).getOrElse(_root_.scalapb.descriptors.PEmpty)
          case 2 => _root_.scalapb.descriptors.PLong(amount)
        }
      }
      def toProtoString: _root_.scala.Predef.String = _root_.scalapb.TextFormat.printToUnicodeString(this)
      def companion = com.bdmplatform.protobuf.transaction.MassTransferTransactionData.Transfer
  }
  
  object Transfer extends scalapb.GeneratedMessageCompanion[com.bdmplatform.protobuf.transaction.MassTransferTransactionData.Transfer] {
    implicit def messageCompanion: scalapb.GeneratedMessageCompanion[com.bdmplatform.protobuf.transaction.MassTransferTransactionData.Transfer] = this
    def fromFieldsMap(__fieldsMap: scala.collection.immutable.Map[_root_.com.google.protobuf.Descriptors.FieldDescriptor, _root_.scala.Any]): com.bdmplatform.protobuf.transaction.MassTransferTransactionData.Transfer = {
      _root_.scala.Predef.require(__fieldsMap.keys.forall(_.getContainingType() == javaDescriptor), "FieldDescriptor does not match message type.")
      val __fields = javaDescriptor.getFields
      com.bdmplatform.protobuf.transaction.MassTransferTransactionData.Transfer(
        __fieldsMap.get(__fields.get(0)).asInstanceOf[_root_.scala.Option[com.bdmplatform.protobuf.transaction.Recipient]],
        __fieldsMap.getOrElse(__fields.get(1), 0L).asInstanceOf[_root_.scala.Long]
      )
    }
    implicit def messageReads: _root_.scalapb.descriptors.Reads[com.bdmplatform.protobuf.transaction.MassTransferTransactionData.Transfer] = _root_.scalapb.descriptors.Reads{
      case _root_.scalapb.descriptors.PMessage(__fieldsMap) =>
        _root_.scala.Predef.require(__fieldsMap.keys.forall(_.containingMessage == scalaDescriptor), "FieldDescriptor does not match message type.")
        com.bdmplatform.protobuf.transaction.MassTransferTransactionData.Transfer(
          __fieldsMap.get(scalaDescriptor.findFieldByNumber(1).get).flatMap(_.as[_root_.scala.Option[com.bdmplatform.protobuf.transaction.Recipient]]),
          __fieldsMap.get(scalaDescriptor.findFieldByNumber(2).get).map(_.as[_root_.scala.Long]).getOrElse(0L)
        )
      case _ => throw new RuntimeException("Expected PMessage")
    }
    def javaDescriptor: _root_.com.google.protobuf.Descriptors.Descriptor = com.bdmplatform.protobuf.transaction.MassTransferTransactionData.javaDescriptor.getNestedTypes.get(0)
    def scalaDescriptor: _root_.scalapb.descriptors.Descriptor = com.bdmplatform.protobuf.transaction.MassTransferTransactionData.scalaDescriptor.nestedMessages(0)
    def messageCompanionForFieldNumber(__number: _root_.scala.Int): _root_.scalapb.GeneratedMessageCompanion[_] = {
      var __out: _root_.scalapb.GeneratedMessageCompanion[_] = null
      (__number: @_root_.scala.unchecked) match {
        case 1 => __out = com.bdmplatform.protobuf.transaction.Recipient
      }
      __out
    }
    lazy val nestedMessagesCompanions: Seq[_root_.scalapb.GeneratedMessageCompanion[_]] = Seq.empty
    def enumCompanionForFieldNumber(__fieldNumber: _root_.scala.Int): _root_.scalapb.GeneratedEnumCompanion[_] = throw new MatchError(__fieldNumber)
    lazy val defaultInstance = com.bdmplatform.protobuf.transaction.MassTransferTransactionData.Transfer(
    )
    implicit class TransferLens[UpperPB](_l: _root_.scalapb.lenses.Lens[UpperPB, com.bdmplatform.protobuf.transaction.MassTransferTransactionData.Transfer]) extends _root_.scalapb.lenses.ObjectLens[UpperPB, com.bdmplatform.protobuf.transaction.MassTransferTransactionData.Transfer](_l) {
      def address: _root_.scalapb.lenses.Lens[UpperPB, com.bdmplatform.protobuf.transaction.Recipient] = field(_.getAddress)((c_, f_) => c_.copy(address = Option(f_)))
      def optionalAddress: _root_.scalapb.lenses.Lens[UpperPB, _root_.scala.Option[com.bdmplatform.protobuf.transaction.Recipient]] = field(_.address)((c_, f_) => c_.copy(address = f_))
      def amount: _root_.scalapb.lenses.Lens[UpperPB, _root_.scala.Long] = field(_.amount)((c_, f_) => c_.copy(amount = f_))
    }
    final val ADDRESS_FIELD_NUMBER = 1
    final val AMOUNT_FIELD_NUMBER = 2
    def of(
      address: _root_.scala.Option[com.bdmplatform.protobuf.transaction.Recipient],
      amount: _root_.scala.Long
    ): _root_.com.bdmplatform.protobuf.transaction.MassTransferTransactionData.Transfer = _root_.com.bdmplatform.protobuf.transaction.MassTransferTransactionData.Transfer(
      address,
      amount
    )
  }
  
  implicit class MassTransferTransactionDataLens[UpperPB](_l: _root_.scalapb.lenses.Lens[UpperPB, com.bdmplatform.protobuf.transaction.MassTransferTransactionData]) extends _root_.scalapb.lenses.ObjectLens[UpperPB, com.bdmplatform.protobuf.transaction.MassTransferTransactionData](_l) {
    def assetId: _root_.scalapb.lenses.Lens[UpperPB, _root_.com.google.protobuf.ByteString] = field(_.assetId)((c_, f_) => c_.copy(assetId = f_))
    def transfers: _root_.scalapb.lenses.Lens[UpperPB, _root_.scala.collection.Seq[com.bdmplatform.protobuf.transaction.MassTransferTransactionData.Transfer]] = field(_.transfers)((c_, f_) => c_.copy(transfers = f_))
    def attachment: _root_.scalapb.lenses.Lens[UpperPB, com.bdmplatform.protobuf.transaction.Attachment] = field(_.getAttachment)((c_, f_) => c_.copy(attachment = Option(f_)))
    def optionalAttachment: _root_.scalapb.lenses.Lens[UpperPB, _root_.scala.Option[com.bdmplatform.protobuf.transaction.Attachment]] = field(_.attachment)((c_, f_) => c_.copy(attachment = f_))
  }
  final val ASSET_ID_FIELD_NUMBER = 1
  final val TRANSFERS_FIELD_NUMBER = 2
  final val ATTACHMENT_FIELD_NUMBER = 3
  def of(
    assetId: _root_.com.google.protobuf.ByteString,
    transfers: _root_.scala.collection.Seq[com.bdmplatform.protobuf.transaction.MassTransferTransactionData.Transfer],
    attachment: _root_.scala.Option[com.bdmplatform.protobuf.transaction.Attachment]
  ): _root_.com.bdmplatform.protobuf.transaction.MassTransferTransactionData = _root_.com.bdmplatform.protobuf.transaction.MassTransferTransactionData(
    assetId,
    transfers,
    attachment
  )
}
