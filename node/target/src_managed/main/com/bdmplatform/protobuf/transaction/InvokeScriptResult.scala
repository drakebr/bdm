// Generated by the Scala Plugin for the Protocol Buffer Compiler.
// Do not edit!
//
// Protofile syntax: PROTO3

package com.bdmplatform.protobuf.transaction

@SerialVersionUID(0L)
final case class InvokeScriptResult(
    data: _root_.scala.collection.Seq[com.bdmplatform.protobuf.transaction.DataTransactionData.DataEntry] = _root_.scala.collection.Seq.empty,
    transfers: _root_.scala.collection.Seq[com.bdmplatform.protobuf.transaction.InvokeScriptResult.Payment] = _root_.scala.collection.Seq.empty,
    issues: _root_.scala.collection.Seq[com.bdmplatform.protobuf.transaction.InvokeScriptResult.Issue] = _root_.scala.collection.Seq.empty,
    reissues: _root_.scala.collection.Seq[com.bdmplatform.protobuf.transaction.InvokeScriptResult.Reissue] = _root_.scala.collection.Seq.empty,
    burns: _root_.scala.collection.Seq[com.bdmplatform.protobuf.transaction.InvokeScriptResult.Burn] = _root_.scala.collection.Seq.empty
    ) extends scalapb.GeneratedMessage with scalapb.Message[InvokeScriptResult] with scalapb.lenses.Updatable[InvokeScriptResult] {
    @transient
    private[this] var __serializedSizeCachedValue: _root_.scala.Int = 0
    private[this] def __computeSerializedValue(): _root_.scala.Int = {
      var __size = 0
      data.foreach { __item =>
        val __value = __item
        __size += 1 + _root_.com.google.protobuf.CodedOutputStream.computeUInt32SizeNoTag(__value.serializedSize) + __value.serializedSize
      }
      transfers.foreach { __item =>
        val __value = __item
        __size += 1 + _root_.com.google.protobuf.CodedOutputStream.computeUInt32SizeNoTag(__value.serializedSize) + __value.serializedSize
      }
      issues.foreach { __item =>
        val __value = __item
        __size += 1 + _root_.com.google.protobuf.CodedOutputStream.computeUInt32SizeNoTag(__value.serializedSize) + __value.serializedSize
      }
      reissues.foreach { __item =>
        val __value = __item
        __size += 1 + _root_.com.google.protobuf.CodedOutputStream.computeUInt32SizeNoTag(__value.serializedSize) + __value.serializedSize
      }
      burns.foreach { __item =>
        val __value = __item
        __size += 1 + _root_.com.google.protobuf.CodedOutputStream.computeUInt32SizeNoTag(__value.serializedSize) + __value.serializedSize
      }
      __size
    }
    final override def serializedSize: _root_.scala.Int = {
      var read = __serializedSizeCachedValue
      if (read == 0) {
        read = __computeSerializedValue()
        __serializedSizeCachedValue = read
      }
      read
    }
    def writeTo(`_output__`: _root_.com.google.protobuf.CodedOutputStream): _root_.scala.Unit = {
      data.foreach { __v =>
        val __m = __v
        _output__.writeTag(1, 2)
        _output__.writeUInt32NoTag(__m.serializedSize)
        __m.writeTo(_output__)
      };
      transfers.foreach { __v =>
        val __m = __v
        _output__.writeTag(2, 2)
        _output__.writeUInt32NoTag(__m.serializedSize)
        __m.writeTo(_output__)
      };
      issues.foreach { __v =>
        val __m = __v
        _output__.writeTag(3, 2)
        _output__.writeUInt32NoTag(__m.serializedSize)
        __m.writeTo(_output__)
      };
      reissues.foreach { __v =>
        val __m = __v
        _output__.writeTag(4, 2)
        _output__.writeUInt32NoTag(__m.serializedSize)
        __m.writeTo(_output__)
      };
      burns.foreach { __v =>
        val __m = __v
        _output__.writeTag(5, 2)
        _output__.writeUInt32NoTag(__m.serializedSize)
        __m.writeTo(_output__)
      };
    }
    def mergeFrom(`_input__`: _root_.com.google.protobuf.CodedInputStream): com.bdmplatform.protobuf.transaction.InvokeScriptResult = {
      val __data = (_root_.scala.collection.immutable.Vector.newBuilder[com.bdmplatform.protobuf.transaction.DataTransactionData.DataEntry] ++= this.data)
      val __transfers = (_root_.scala.collection.immutable.Vector.newBuilder[com.bdmplatform.protobuf.transaction.InvokeScriptResult.Payment] ++= this.transfers)
      val __issues = (_root_.scala.collection.immutable.Vector.newBuilder[com.bdmplatform.protobuf.transaction.InvokeScriptResult.Issue] ++= this.issues)
      val __reissues = (_root_.scala.collection.immutable.Vector.newBuilder[com.bdmplatform.protobuf.transaction.InvokeScriptResult.Reissue] ++= this.reissues)
      val __burns = (_root_.scala.collection.immutable.Vector.newBuilder[com.bdmplatform.protobuf.transaction.InvokeScriptResult.Burn] ++= this.burns)
      var _done__ = false
      while (!_done__) {
        val _tag__ = _input__.readTag()
        _tag__ match {
          case 0 => _done__ = true
          case 10 =>
            __data += _root_.scalapb.LiteParser.readMessage(_input__, com.bdmplatform.protobuf.transaction.DataTransactionData.DataEntry.defaultInstance)
          case 18 =>
            __transfers += _root_.scalapb.LiteParser.readMessage(_input__, com.bdmplatform.protobuf.transaction.InvokeScriptResult.Payment.defaultInstance)
          case 26 =>
            __issues += _root_.scalapb.LiteParser.readMessage(_input__, com.bdmplatform.protobuf.transaction.InvokeScriptResult.Issue.defaultInstance)
          case 34 =>
            __reissues += _root_.scalapb.LiteParser.readMessage(_input__, com.bdmplatform.protobuf.transaction.InvokeScriptResult.Reissue.defaultInstance)
          case 42 =>
            __burns += _root_.scalapb.LiteParser.readMessage(_input__, com.bdmplatform.protobuf.transaction.InvokeScriptResult.Burn.defaultInstance)
          case tag => _input__.skipField(tag)
        }
      }
      com.bdmplatform.protobuf.transaction.InvokeScriptResult(
          data = __data.result(),
          transfers = __transfers.result(),
          issues = __issues.result(),
          reissues = __reissues.result(),
          burns = __burns.result()
      )
    }
    def clearData = copy(data = _root_.scala.collection.Seq.empty)
    def addData(__vs: com.bdmplatform.protobuf.transaction.DataTransactionData.DataEntry*): InvokeScriptResult = addAllData(__vs)
    def addAllData(__vs: TraversableOnce[com.bdmplatform.protobuf.transaction.DataTransactionData.DataEntry]): InvokeScriptResult = copy(data = data ++ __vs)
    def withData(__v: _root_.scala.collection.Seq[com.bdmplatform.protobuf.transaction.DataTransactionData.DataEntry]): InvokeScriptResult = copy(data = __v)
    def clearTransfers = copy(transfers = _root_.scala.collection.Seq.empty)
    def addTransfers(__vs: com.bdmplatform.protobuf.transaction.InvokeScriptResult.Payment*): InvokeScriptResult = addAllTransfers(__vs)
    def addAllTransfers(__vs: TraversableOnce[com.bdmplatform.protobuf.transaction.InvokeScriptResult.Payment]): InvokeScriptResult = copy(transfers = transfers ++ __vs)
    def withTransfers(__v: _root_.scala.collection.Seq[com.bdmplatform.protobuf.transaction.InvokeScriptResult.Payment]): InvokeScriptResult = copy(transfers = __v)
    def clearIssues = copy(issues = _root_.scala.collection.Seq.empty)
    def addIssues(__vs: com.bdmplatform.protobuf.transaction.InvokeScriptResult.Issue*): InvokeScriptResult = addAllIssues(__vs)
    def addAllIssues(__vs: TraversableOnce[com.bdmplatform.protobuf.transaction.InvokeScriptResult.Issue]): InvokeScriptResult = copy(issues = issues ++ __vs)
    def withIssues(__v: _root_.scala.collection.Seq[com.bdmplatform.protobuf.transaction.InvokeScriptResult.Issue]): InvokeScriptResult = copy(issues = __v)
    def clearReissues = copy(reissues = _root_.scala.collection.Seq.empty)
    def addReissues(__vs: com.bdmplatform.protobuf.transaction.InvokeScriptResult.Reissue*): InvokeScriptResult = addAllReissues(__vs)
    def addAllReissues(__vs: TraversableOnce[com.bdmplatform.protobuf.transaction.InvokeScriptResult.Reissue]): InvokeScriptResult = copy(reissues = reissues ++ __vs)
    def withReissues(__v: _root_.scala.collection.Seq[com.bdmplatform.protobuf.transaction.InvokeScriptResult.Reissue]): InvokeScriptResult = copy(reissues = __v)
    def clearBurns = copy(burns = _root_.scala.collection.Seq.empty)
    def addBurns(__vs: com.bdmplatform.protobuf.transaction.InvokeScriptResult.Burn*): InvokeScriptResult = addAllBurns(__vs)
    def addAllBurns(__vs: TraversableOnce[com.bdmplatform.protobuf.transaction.InvokeScriptResult.Burn]): InvokeScriptResult = copy(burns = burns ++ __vs)
    def withBurns(__v: _root_.scala.collection.Seq[com.bdmplatform.protobuf.transaction.InvokeScriptResult.Burn]): InvokeScriptResult = copy(burns = __v)
    def getFieldByNumber(__fieldNumber: _root_.scala.Int): _root_.scala.Any = {
      (__fieldNumber: @_root_.scala.unchecked) match {
        case 1 => data
        case 2 => transfers
        case 3 => issues
        case 4 => reissues
        case 5 => burns
      }
    }
    def getField(__field: _root_.scalapb.descriptors.FieldDescriptor): _root_.scalapb.descriptors.PValue = {
      _root_.scala.Predef.require(__field.containingMessage eq companion.scalaDescriptor)
      (__field.number: @_root_.scala.unchecked) match {
        case 1 => _root_.scalapb.descriptors.PRepeated(data.map(_.toPMessage)(_root_.scala.collection.breakOut))
        case 2 => _root_.scalapb.descriptors.PRepeated(transfers.map(_.toPMessage)(_root_.scala.collection.breakOut))
        case 3 => _root_.scalapb.descriptors.PRepeated(issues.map(_.toPMessage)(_root_.scala.collection.breakOut))
        case 4 => _root_.scalapb.descriptors.PRepeated(reissues.map(_.toPMessage)(_root_.scala.collection.breakOut))
        case 5 => _root_.scalapb.descriptors.PRepeated(burns.map(_.toPMessage)(_root_.scala.collection.breakOut))
      }
    }
    def toProtoString: _root_.scala.Predef.String = _root_.scalapb.TextFormat.printToUnicodeString(this)
    def companion = com.bdmplatform.protobuf.transaction.InvokeScriptResult
}

object InvokeScriptResult extends scalapb.GeneratedMessageCompanion[com.bdmplatform.protobuf.transaction.InvokeScriptResult] {
  implicit def messageCompanion: scalapb.GeneratedMessageCompanion[com.bdmplatform.protobuf.transaction.InvokeScriptResult] = this
  def fromFieldsMap(__fieldsMap: scala.collection.immutable.Map[_root_.com.google.protobuf.Descriptors.FieldDescriptor, _root_.scala.Any]): com.bdmplatform.protobuf.transaction.InvokeScriptResult = {
    _root_.scala.Predef.require(__fieldsMap.keys.forall(_.getContainingType() == javaDescriptor), "FieldDescriptor does not match message type.")
    val __fields = javaDescriptor.getFields
    com.bdmplatform.protobuf.transaction.InvokeScriptResult(
      __fieldsMap.getOrElse(__fields.get(0), Nil).asInstanceOf[_root_.scala.collection.Seq[com.bdmplatform.protobuf.transaction.DataTransactionData.DataEntry]],
      __fieldsMap.getOrElse(__fields.get(1), Nil).asInstanceOf[_root_.scala.collection.Seq[com.bdmplatform.protobuf.transaction.InvokeScriptResult.Payment]],
      __fieldsMap.getOrElse(__fields.get(2), Nil).asInstanceOf[_root_.scala.collection.Seq[com.bdmplatform.protobuf.transaction.InvokeScriptResult.Issue]],
      __fieldsMap.getOrElse(__fields.get(3), Nil).asInstanceOf[_root_.scala.collection.Seq[com.bdmplatform.protobuf.transaction.InvokeScriptResult.Reissue]],
      __fieldsMap.getOrElse(__fields.get(4), Nil).asInstanceOf[_root_.scala.collection.Seq[com.bdmplatform.protobuf.transaction.InvokeScriptResult.Burn]]
    )
  }
  implicit def messageReads: _root_.scalapb.descriptors.Reads[com.bdmplatform.protobuf.transaction.InvokeScriptResult] = _root_.scalapb.descriptors.Reads{
    case _root_.scalapb.descriptors.PMessage(__fieldsMap) =>
      _root_.scala.Predef.require(__fieldsMap.keys.forall(_.containingMessage == scalaDescriptor), "FieldDescriptor does not match message type.")
      com.bdmplatform.protobuf.transaction.InvokeScriptResult(
        __fieldsMap.get(scalaDescriptor.findFieldByNumber(1).get).map(_.as[_root_.scala.collection.Seq[com.bdmplatform.protobuf.transaction.DataTransactionData.DataEntry]]).getOrElse(_root_.scala.collection.Seq.empty),
        __fieldsMap.get(scalaDescriptor.findFieldByNumber(2).get).map(_.as[_root_.scala.collection.Seq[com.bdmplatform.protobuf.transaction.InvokeScriptResult.Payment]]).getOrElse(_root_.scala.collection.Seq.empty),
        __fieldsMap.get(scalaDescriptor.findFieldByNumber(3).get).map(_.as[_root_.scala.collection.Seq[com.bdmplatform.protobuf.transaction.InvokeScriptResult.Issue]]).getOrElse(_root_.scala.collection.Seq.empty),
        __fieldsMap.get(scalaDescriptor.findFieldByNumber(4).get).map(_.as[_root_.scala.collection.Seq[com.bdmplatform.protobuf.transaction.InvokeScriptResult.Reissue]]).getOrElse(_root_.scala.collection.Seq.empty),
        __fieldsMap.get(scalaDescriptor.findFieldByNumber(5).get).map(_.as[_root_.scala.collection.Seq[com.bdmplatform.protobuf.transaction.InvokeScriptResult.Burn]]).getOrElse(_root_.scala.collection.Seq.empty)
      )
    case _ => throw new RuntimeException("Expected PMessage")
  }
  def javaDescriptor: _root_.com.google.protobuf.Descriptors.Descriptor = InvokeScriptResultProto.javaDescriptor.getMessageTypes.get(0)
  def scalaDescriptor: _root_.scalapb.descriptors.Descriptor = InvokeScriptResultProto.scalaDescriptor.messages(0)
  def messageCompanionForFieldNumber(__number: _root_.scala.Int): _root_.scalapb.GeneratedMessageCompanion[_] = {
    var __out: _root_.scalapb.GeneratedMessageCompanion[_] = null
    (__number: @_root_.scala.unchecked) match {
      case 1 => __out = com.bdmplatform.protobuf.transaction.DataTransactionData.DataEntry
      case 2 => __out = com.bdmplatform.protobuf.transaction.InvokeScriptResult.Payment
      case 3 => __out = com.bdmplatform.protobuf.transaction.InvokeScriptResult.Issue
      case 4 => __out = com.bdmplatform.protobuf.transaction.InvokeScriptResult.Reissue
      case 5 => __out = com.bdmplatform.protobuf.transaction.InvokeScriptResult.Burn
    }
    __out
  }
  lazy val nestedMessagesCompanions: Seq[_root_.scalapb.GeneratedMessageCompanion[_]] = Seq[_root_.scalapb.GeneratedMessageCompanion[_]](
    _root_.com.bdmplatform.protobuf.transaction.InvokeScriptResult.Payment,
    _root_.com.bdmplatform.protobuf.transaction.InvokeScriptResult.Issue,
    _root_.com.bdmplatform.protobuf.transaction.InvokeScriptResult.Reissue,
    _root_.com.bdmplatform.protobuf.transaction.InvokeScriptResult.Burn
  )
  def enumCompanionForFieldNumber(__fieldNumber: _root_.scala.Int): _root_.scalapb.GeneratedEnumCompanion[_] = throw new MatchError(__fieldNumber)
  lazy val defaultInstance = com.bdmplatform.protobuf.transaction.InvokeScriptResult(
  )
  @SerialVersionUID(0L)
  final case class Payment(
      address: _root_.com.google.protobuf.ByteString = _root_.com.google.protobuf.ByteString.EMPTY,
      amount: _root_.scala.Option[com.bdmplatform.protobuf.Amount] = None
      ) extends scalapb.GeneratedMessage with scalapb.Message[Payment] with scalapb.lenses.Updatable[Payment] {
      @transient
      private[this] var __serializedSizeCachedValue: _root_.scala.Int = 0
      private[this] def __computeSerializedValue(): _root_.scala.Int = {
        var __size = 0
        
        {
          val __value = address
          if (__value != _root_.com.google.protobuf.ByteString.EMPTY) {
            __size += _root_.com.google.protobuf.CodedOutputStream.computeBytesSize(1, __value)
          }
        };
        if (amount.isDefined) {
          val __value = amount.get
          __size += 1 + _root_.com.google.protobuf.CodedOutputStream.computeUInt32SizeNoTag(__value.serializedSize) + __value.serializedSize
        };
        __size
      }
      final override def serializedSize: _root_.scala.Int = {
        var read = __serializedSizeCachedValue
        if (read == 0) {
          read = __computeSerializedValue()
          __serializedSizeCachedValue = read
        }
        read
      }
      def writeTo(`_output__`: _root_.com.google.protobuf.CodedOutputStream): _root_.scala.Unit = {
        {
          val __v = address
          if (__v != _root_.com.google.protobuf.ByteString.EMPTY) {
            _output__.writeBytes(1, __v)
          }
        };
        amount.foreach { __v =>
          val __m = __v
          _output__.writeTag(2, 2)
          _output__.writeUInt32NoTag(__m.serializedSize)
          __m.writeTo(_output__)
        };
      }
      def mergeFrom(`_input__`: _root_.com.google.protobuf.CodedInputStream): com.bdmplatform.protobuf.transaction.InvokeScriptResult.Payment = {
        var __address = this.address
        var __amount = this.amount
        var _done__ = false
        while (!_done__) {
          val _tag__ = _input__.readTag()
          _tag__ match {
            case 0 => _done__ = true
            case 10 =>
              __address = _input__.readBytes()
            case 18 =>
              __amount = Option(_root_.scalapb.LiteParser.readMessage(_input__, __amount.getOrElse(com.bdmplatform.protobuf.Amount.defaultInstance)))
            case tag => _input__.skipField(tag)
          }
        }
        com.bdmplatform.protobuf.transaction.InvokeScriptResult.Payment(
            address = __address,
            amount = __amount
        )
      }
      def withAddress(__v: _root_.com.google.protobuf.ByteString): Payment = copy(address = __v)
      def getAmount: com.bdmplatform.protobuf.Amount = amount.getOrElse(com.bdmplatform.protobuf.Amount.defaultInstance)
      def clearAmount: Payment = copy(amount = None)
      def withAmount(__v: com.bdmplatform.protobuf.Amount): Payment = copy(amount = Option(__v))
      def getFieldByNumber(__fieldNumber: _root_.scala.Int): _root_.scala.Any = {
        (__fieldNumber: @_root_.scala.unchecked) match {
          case 1 => {
            val __t = address
            if (__t != _root_.com.google.protobuf.ByteString.EMPTY) __t else null
          }
          case 2 => amount.orNull
        }
      }
      def getField(__field: _root_.scalapb.descriptors.FieldDescriptor): _root_.scalapb.descriptors.PValue = {
        _root_.scala.Predef.require(__field.containingMessage eq companion.scalaDescriptor)
        (__field.number: @_root_.scala.unchecked) match {
          case 1 => _root_.scalapb.descriptors.PByteString(address)
          case 2 => amount.map(_.toPMessage).getOrElse(_root_.scalapb.descriptors.PEmpty)
        }
      }
      def toProtoString: _root_.scala.Predef.String = _root_.scalapb.TextFormat.printToUnicodeString(this)
      def companion = com.bdmplatform.protobuf.transaction.InvokeScriptResult.Payment
  }
  
  object Payment extends scalapb.GeneratedMessageCompanion[com.bdmplatform.protobuf.transaction.InvokeScriptResult.Payment] {
    implicit def messageCompanion: scalapb.GeneratedMessageCompanion[com.bdmplatform.protobuf.transaction.InvokeScriptResult.Payment] = this
    def fromFieldsMap(__fieldsMap: scala.collection.immutable.Map[_root_.com.google.protobuf.Descriptors.FieldDescriptor, _root_.scala.Any]): com.bdmplatform.protobuf.transaction.InvokeScriptResult.Payment = {
      _root_.scala.Predef.require(__fieldsMap.keys.forall(_.getContainingType() == javaDescriptor), "FieldDescriptor does not match message type.")
      val __fields = javaDescriptor.getFields
      com.bdmplatform.protobuf.transaction.InvokeScriptResult.Payment(
        __fieldsMap.getOrElse(__fields.get(0), _root_.com.google.protobuf.ByteString.EMPTY).asInstanceOf[_root_.com.google.protobuf.ByteString],
        __fieldsMap.get(__fields.get(1)).asInstanceOf[_root_.scala.Option[com.bdmplatform.protobuf.Amount]]
      )
    }
    implicit def messageReads: _root_.scalapb.descriptors.Reads[com.bdmplatform.protobuf.transaction.InvokeScriptResult.Payment] = _root_.scalapb.descriptors.Reads{
      case _root_.scalapb.descriptors.PMessage(__fieldsMap) =>
        _root_.scala.Predef.require(__fieldsMap.keys.forall(_.containingMessage == scalaDescriptor), "FieldDescriptor does not match message type.")
        com.bdmplatform.protobuf.transaction.InvokeScriptResult.Payment(
          __fieldsMap.get(scalaDescriptor.findFieldByNumber(1).get).map(_.as[_root_.com.google.protobuf.ByteString]).getOrElse(_root_.com.google.protobuf.ByteString.EMPTY),
          __fieldsMap.get(scalaDescriptor.findFieldByNumber(2).get).flatMap(_.as[_root_.scala.Option[com.bdmplatform.protobuf.Amount]])
        )
      case _ => throw new RuntimeException("Expected PMessage")
    }
    def javaDescriptor: _root_.com.google.protobuf.Descriptors.Descriptor = com.bdmplatform.protobuf.transaction.InvokeScriptResult.javaDescriptor.getNestedTypes.get(0)
    def scalaDescriptor: _root_.scalapb.descriptors.Descriptor = com.bdmplatform.protobuf.transaction.InvokeScriptResult.scalaDescriptor.nestedMessages(0)
    def messageCompanionForFieldNumber(__number: _root_.scala.Int): _root_.scalapb.GeneratedMessageCompanion[_] = {
      var __out: _root_.scalapb.GeneratedMessageCompanion[_] = null
      (__number: @_root_.scala.unchecked) match {
        case 2 => __out = com.bdmplatform.protobuf.Amount
      }
      __out
    }
    lazy val nestedMessagesCompanions: Seq[_root_.scalapb.GeneratedMessageCompanion[_]] = Seq.empty
    def enumCompanionForFieldNumber(__fieldNumber: _root_.scala.Int): _root_.scalapb.GeneratedEnumCompanion[_] = throw new MatchError(__fieldNumber)
    lazy val defaultInstance = com.bdmplatform.protobuf.transaction.InvokeScriptResult.Payment(
    )
    implicit class PaymentLens[UpperPB](_l: _root_.scalapb.lenses.Lens[UpperPB, com.bdmplatform.protobuf.transaction.InvokeScriptResult.Payment]) extends _root_.scalapb.lenses.ObjectLens[UpperPB, com.bdmplatform.protobuf.transaction.InvokeScriptResult.Payment](_l) {
      def address: _root_.scalapb.lenses.Lens[UpperPB, _root_.com.google.protobuf.ByteString] = field(_.address)((c_, f_) => c_.copy(address = f_))
      def amount: _root_.scalapb.lenses.Lens[UpperPB, com.bdmplatform.protobuf.Amount] = field(_.getAmount)((c_, f_) => c_.copy(amount = Option(f_)))
      def optionalAmount: _root_.scalapb.lenses.Lens[UpperPB, _root_.scala.Option[com.bdmplatform.protobuf.Amount]] = field(_.amount)((c_, f_) => c_.copy(amount = f_))
    }
    final val ADDRESS_FIELD_NUMBER = 1
    final val AMOUNT_FIELD_NUMBER = 2
    def of(
      address: _root_.com.google.protobuf.ByteString,
      amount: _root_.scala.Option[com.bdmplatform.protobuf.Amount]
    ): _root_.com.bdmplatform.protobuf.transaction.InvokeScriptResult.Payment = _root_.com.bdmplatform.protobuf.transaction.InvokeScriptResult.Payment(
      address,
      amount
    )
  }
  
  @SerialVersionUID(0L)
  final case class Issue(
      assetId: _root_.com.google.protobuf.ByteString = _root_.com.google.protobuf.ByteString.EMPTY,
      name: _root_.scala.Predef.String = "",
      description: _root_.scala.Predef.String = "",
      amount: _root_.scala.Long = 0L,
      decimals: _root_.scala.Int = 0,
      reissuable: _root_.scala.Boolean = false,
      script: _root_.scala.Option[com.bdmplatform.protobuf.transaction.Script] = None,
      nonce: _root_.scala.Long = 0L
      ) extends scalapb.GeneratedMessage with scalapb.Message[Issue] with scalapb.lenses.Updatable[Issue] {
      @transient
      private[this] var __serializedSizeCachedValue: _root_.scala.Int = 0
      private[this] def __computeSerializedValue(): _root_.scala.Int = {
        var __size = 0
        
        {
          val __value = assetId
          if (__value != _root_.com.google.protobuf.ByteString.EMPTY) {
            __size += _root_.com.google.protobuf.CodedOutputStream.computeBytesSize(1, __value)
          }
        };
        
        {
          val __value = name
          if (__value != "") {
            __size += _root_.com.google.protobuf.CodedOutputStream.computeStringSize(2, __value)
          }
        };
        
        {
          val __value = description
          if (__value != "") {
            __size += _root_.com.google.protobuf.CodedOutputStream.computeStringSize(3, __value)
          }
        };
        
        {
          val __value = amount
          if (__value != 0L) {
            __size += _root_.com.google.protobuf.CodedOutputStream.computeInt64Size(4, __value)
          }
        };
        
        {
          val __value = decimals
          if (__value != 0) {
            __size += _root_.com.google.protobuf.CodedOutputStream.computeInt32Size(5, __value)
          }
        };
        
        {
          val __value = reissuable
          if (__value != false) {
            __size += _root_.com.google.protobuf.CodedOutputStream.computeBoolSize(6, __value)
          }
        };
        if (script.isDefined) {
          val __value = script.get
          __size += 1 + _root_.com.google.protobuf.CodedOutputStream.computeUInt32SizeNoTag(__value.serializedSize) + __value.serializedSize
        };
        
        {
          val __value = nonce
          if (__value != 0L) {
            __size += _root_.com.google.protobuf.CodedOutputStream.computeInt64Size(8, __value)
          }
        };
        __size
      }
      final override def serializedSize: _root_.scala.Int = {
        var read = __serializedSizeCachedValue
        if (read == 0) {
          read = __computeSerializedValue()
          __serializedSizeCachedValue = read
        }
        read
      }
      def writeTo(`_output__`: _root_.com.google.protobuf.CodedOutputStream): _root_.scala.Unit = {
        {
          val __v = assetId
          if (__v != _root_.com.google.protobuf.ByteString.EMPTY) {
            _output__.writeBytes(1, __v)
          }
        };
        {
          val __v = name
          if (__v != "") {
            _output__.writeString(2, __v)
          }
        };
        {
          val __v = description
          if (__v != "") {
            _output__.writeString(3, __v)
          }
        };
        {
          val __v = amount
          if (__v != 0L) {
            _output__.writeInt64(4, __v)
          }
        };
        {
          val __v = decimals
          if (__v != 0) {
            _output__.writeInt32(5, __v)
          }
        };
        {
          val __v = reissuable
          if (__v != false) {
            _output__.writeBool(6, __v)
          }
        };
        script.foreach { __v =>
          val __m = __v
          _output__.writeTag(7, 2)
          _output__.writeUInt32NoTag(__m.serializedSize)
          __m.writeTo(_output__)
        };
        {
          val __v = nonce
          if (__v != 0L) {
            _output__.writeInt64(8, __v)
          }
        };
      }
      def mergeFrom(`_input__`: _root_.com.google.protobuf.CodedInputStream): com.bdmplatform.protobuf.transaction.InvokeScriptResult.Issue = {
        var __assetId = this.assetId
        var __name = this.name
        var __description = this.description
        var __amount = this.amount
        var __decimals = this.decimals
        var __reissuable = this.reissuable
        var __script = this.script
        var __nonce = this.nonce
        var _done__ = false
        while (!_done__) {
          val _tag__ = _input__.readTag()
          _tag__ match {
            case 0 => _done__ = true
            case 10 =>
              __assetId = _input__.readBytes()
            case 18 =>
              __name = _input__.readString()
            case 26 =>
              __description = _input__.readString()
            case 32 =>
              __amount = _input__.readInt64()
            case 40 =>
              __decimals = _input__.readInt32()
            case 48 =>
              __reissuable = _input__.readBool()
            case 58 =>
              __script = Option(_root_.scalapb.LiteParser.readMessage(_input__, __script.getOrElse(com.bdmplatform.protobuf.transaction.Script.defaultInstance)))
            case 64 =>
              __nonce = _input__.readInt64()
            case tag => _input__.skipField(tag)
          }
        }
        com.bdmplatform.protobuf.transaction.InvokeScriptResult.Issue(
            assetId = __assetId,
            name = __name,
            description = __description,
            amount = __amount,
            decimals = __decimals,
            reissuable = __reissuable,
            script = __script,
            nonce = __nonce
        )
      }
      def withAssetId(__v: _root_.com.google.protobuf.ByteString): Issue = copy(assetId = __v)
      def withName(__v: _root_.scala.Predef.String): Issue = copy(name = __v)
      def withDescription(__v: _root_.scala.Predef.String): Issue = copy(description = __v)
      def withAmount(__v: _root_.scala.Long): Issue = copy(amount = __v)
      def withDecimals(__v: _root_.scala.Int): Issue = copy(decimals = __v)
      def withReissuable(__v: _root_.scala.Boolean): Issue = copy(reissuable = __v)
      def getScript: com.bdmplatform.protobuf.transaction.Script = script.getOrElse(com.bdmplatform.protobuf.transaction.Script.defaultInstance)
      def clearScript: Issue = copy(script = None)
      def withScript(__v: com.bdmplatform.protobuf.transaction.Script): Issue = copy(script = Option(__v))
      def withNonce(__v: _root_.scala.Long): Issue = copy(nonce = __v)
      def getFieldByNumber(__fieldNumber: _root_.scala.Int): _root_.scala.Any = {
        (__fieldNumber: @_root_.scala.unchecked) match {
          case 1 => {
            val __t = assetId
            if (__t != _root_.com.google.protobuf.ByteString.EMPTY) __t else null
          }
          case 2 => {
            val __t = name
            if (__t != "") __t else null
          }
          case 3 => {
            val __t = description
            if (__t != "") __t else null
          }
          case 4 => {
            val __t = amount
            if (__t != 0L) __t else null
          }
          case 5 => {
            val __t = decimals
            if (__t != 0) __t else null
          }
          case 6 => {
            val __t = reissuable
            if (__t != false) __t else null
          }
          case 7 => script.orNull
          case 8 => {
            val __t = nonce
            if (__t != 0L) __t else null
          }
        }
      }
      def getField(__field: _root_.scalapb.descriptors.FieldDescriptor): _root_.scalapb.descriptors.PValue = {
        _root_.scala.Predef.require(__field.containingMessage eq companion.scalaDescriptor)
        (__field.number: @_root_.scala.unchecked) match {
          case 1 => _root_.scalapb.descriptors.PByteString(assetId)
          case 2 => _root_.scalapb.descriptors.PString(name)
          case 3 => _root_.scalapb.descriptors.PString(description)
          case 4 => _root_.scalapb.descriptors.PLong(amount)
          case 5 => _root_.scalapb.descriptors.PInt(decimals)
          case 6 => _root_.scalapb.descriptors.PBoolean(reissuable)
          case 7 => script.map(_.toPMessage).getOrElse(_root_.scalapb.descriptors.PEmpty)
          case 8 => _root_.scalapb.descriptors.PLong(nonce)
        }
      }
      def toProtoString: _root_.scala.Predef.String = _root_.scalapb.TextFormat.printToUnicodeString(this)
      def companion = com.bdmplatform.protobuf.transaction.InvokeScriptResult.Issue
  }
  
  object Issue extends scalapb.GeneratedMessageCompanion[com.bdmplatform.protobuf.transaction.InvokeScriptResult.Issue] {
    implicit def messageCompanion: scalapb.GeneratedMessageCompanion[com.bdmplatform.protobuf.transaction.InvokeScriptResult.Issue] = this
    def fromFieldsMap(__fieldsMap: scala.collection.immutable.Map[_root_.com.google.protobuf.Descriptors.FieldDescriptor, _root_.scala.Any]): com.bdmplatform.protobuf.transaction.InvokeScriptResult.Issue = {
      _root_.scala.Predef.require(__fieldsMap.keys.forall(_.getContainingType() == javaDescriptor), "FieldDescriptor does not match message type.")
      val __fields = javaDescriptor.getFields
      com.bdmplatform.protobuf.transaction.InvokeScriptResult.Issue(
        __fieldsMap.getOrElse(__fields.get(0), _root_.com.google.protobuf.ByteString.EMPTY).asInstanceOf[_root_.com.google.protobuf.ByteString],
        __fieldsMap.getOrElse(__fields.get(1), "").asInstanceOf[_root_.scala.Predef.String],
        __fieldsMap.getOrElse(__fields.get(2), "").asInstanceOf[_root_.scala.Predef.String],
        __fieldsMap.getOrElse(__fields.get(3), 0L).asInstanceOf[_root_.scala.Long],
        __fieldsMap.getOrElse(__fields.get(4), 0).asInstanceOf[_root_.scala.Int],
        __fieldsMap.getOrElse(__fields.get(5), false).asInstanceOf[_root_.scala.Boolean],
        __fieldsMap.get(__fields.get(6)).asInstanceOf[_root_.scala.Option[com.bdmplatform.protobuf.transaction.Script]],
        __fieldsMap.getOrElse(__fields.get(7), 0L).asInstanceOf[_root_.scala.Long]
      )
    }
    implicit def messageReads: _root_.scalapb.descriptors.Reads[com.bdmplatform.protobuf.transaction.InvokeScriptResult.Issue] = _root_.scalapb.descriptors.Reads{
      case _root_.scalapb.descriptors.PMessage(__fieldsMap) =>
        _root_.scala.Predef.require(__fieldsMap.keys.forall(_.containingMessage == scalaDescriptor), "FieldDescriptor does not match message type.")
        com.bdmplatform.protobuf.transaction.InvokeScriptResult.Issue(
          __fieldsMap.get(scalaDescriptor.findFieldByNumber(1).get).map(_.as[_root_.com.google.protobuf.ByteString]).getOrElse(_root_.com.google.protobuf.ByteString.EMPTY),
          __fieldsMap.get(scalaDescriptor.findFieldByNumber(2).get).map(_.as[_root_.scala.Predef.String]).getOrElse(""),
          __fieldsMap.get(scalaDescriptor.findFieldByNumber(3).get).map(_.as[_root_.scala.Predef.String]).getOrElse(""),
          __fieldsMap.get(scalaDescriptor.findFieldByNumber(4).get).map(_.as[_root_.scala.Long]).getOrElse(0L),
          __fieldsMap.get(scalaDescriptor.findFieldByNumber(5).get).map(_.as[_root_.scala.Int]).getOrElse(0),
          __fieldsMap.get(scalaDescriptor.findFieldByNumber(6).get).map(_.as[_root_.scala.Boolean]).getOrElse(false),
          __fieldsMap.get(scalaDescriptor.findFieldByNumber(7).get).flatMap(_.as[_root_.scala.Option[com.bdmplatform.protobuf.transaction.Script]]),
          __fieldsMap.get(scalaDescriptor.findFieldByNumber(8).get).map(_.as[_root_.scala.Long]).getOrElse(0L)
        )
      case _ => throw new RuntimeException("Expected PMessage")
    }
    def javaDescriptor: _root_.com.google.protobuf.Descriptors.Descriptor = com.bdmplatform.protobuf.transaction.InvokeScriptResult.javaDescriptor.getNestedTypes.get(1)
    def scalaDescriptor: _root_.scalapb.descriptors.Descriptor = com.bdmplatform.protobuf.transaction.InvokeScriptResult.scalaDescriptor.nestedMessages(1)
    def messageCompanionForFieldNumber(__number: _root_.scala.Int): _root_.scalapb.GeneratedMessageCompanion[_] = {
      var __out: _root_.scalapb.GeneratedMessageCompanion[_] = null
      (__number: @_root_.scala.unchecked) match {
        case 7 => __out = com.bdmplatform.protobuf.transaction.Script
      }
      __out
    }
    lazy val nestedMessagesCompanions: Seq[_root_.scalapb.GeneratedMessageCompanion[_]] = Seq.empty
    def enumCompanionForFieldNumber(__fieldNumber: _root_.scala.Int): _root_.scalapb.GeneratedEnumCompanion[_] = throw new MatchError(__fieldNumber)
    lazy val defaultInstance = com.bdmplatform.protobuf.transaction.InvokeScriptResult.Issue(
    )
    implicit class IssueLens[UpperPB](_l: _root_.scalapb.lenses.Lens[UpperPB, com.bdmplatform.protobuf.transaction.InvokeScriptResult.Issue]) extends _root_.scalapb.lenses.ObjectLens[UpperPB, com.bdmplatform.protobuf.transaction.InvokeScriptResult.Issue](_l) {
      def assetId: _root_.scalapb.lenses.Lens[UpperPB, _root_.com.google.protobuf.ByteString] = field(_.assetId)((c_, f_) => c_.copy(assetId = f_))
      def name: _root_.scalapb.lenses.Lens[UpperPB, _root_.scala.Predef.String] = field(_.name)((c_, f_) => c_.copy(name = f_))
      def description: _root_.scalapb.lenses.Lens[UpperPB, _root_.scala.Predef.String] = field(_.description)((c_, f_) => c_.copy(description = f_))
      def amount: _root_.scalapb.lenses.Lens[UpperPB, _root_.scala.Long] = field(_.amount)((c_, f_) => c_.copy(amount = f_))
      def decimals: _root_.scalapb.lenses.Lens[UpperPB, _root_.scala.Int] = field(_.decimals)((c_, f_) => c_.copy(decimals = f_))
      def reissuable: _root_.scalapb.lenses.Lens[UpperPB, _root_.scala.Boolean] = field(_.reissuable)((c_, f_) => c_.copy(reissuable = f_))
      def script: _root_.scalapb.lenses.Lens[UpperPB, com.bdmplatform.protobuf.transaction.Script] = field(_.getScript)((c_, f_) => c_.copy(script = Option(f_)))
      def optionalScript: _root_.scalapb.lenses.Lens[UpperPB, _root_.scala.Option[com.bdmplatform.protobuf.transaction.Script]] = field(_.script)((c_, f_) => c_.copy(script = f_))
      def nonce: _root_.scalapb.lenses.Lens[UpperPB, _root_.scala.Long] = field(_.nonce)((c_, f_) => c_.copy(nonce = f_))
    }
    final val ASSET_ID_FIELD_NUMBER = 1
    final val NAME_FIELD_NUMBER = 2
    final val DESCRIPTION_FIELD_NUMBER = 3
    final val AMOUNT_FIELD_NUMBER = 4
    final val DECIMALS_FIELD_NUMBER = 5
    final val REISSUABLE_FIELD_NUMBER = 6
    final val SCRIPT_FIELD_NUMBER = 7
    final val NONCE_FIELD_NUMBER = 8
    def of(
      assetId: _root_.com.google.protobuf.ByteString,
      name: _root_.scala.Predef.String,
      description: _root_.scala.Predef.String,
      amount: _root_.scala.Long,
      decimals: _root_.scala.Int,
      reissuable: _root_.scala.Boolean,
      script: _root_.scala.Option[com.bdmplatform.protobuf.transaction.Script],
      nonce: _root_.scala.Long
    ): _root_.com.bdmplatform.protobuf.transaction.InvokeScriptResult.Issue = _root_.com.bdmplatform.protobuf.transaction.InvokeScriptResult.Issue(
      assetId,
      name,
      description,
      amount,
      decimals,
      reissuable,
      script,
      nonce
    )
  }
  
  @SerialVersionUID(0L)
  final case class Reissue(
      assetId: _root_.com.google.protobuf.ByteString = _root_.com.google.protobuf.ByteString.EMPTY,
      amount: _root_.scala.Long = 0L,
      isReissuable: _root_.scala.Boolean = false
      ) extends scalapb.GeneratedMessage with scalapb.Message[Reissue] with scalapb.lenses.Updatable[Reissue] {
      @transient
      private[this] var __serializedSizeCachedValue: _root_.scala.Int = 0
      private[this] def __computeSerializedValue(): _root_.scala.Int = {
        var __size = 0
        
        {
          val __value = assetId
          if (__value != _root_.com.google.protobuf.ByteString.EMPTY) {
            __size += _root_.com.google.protobuf.CodedOutputStream.computeBytesSize(1, __value)
          }
        };
        
        {
          val __value = amount
          if (__value != 0L) {
            __size += _root_.com.google.protobuf.CodedOutputStream.computeInt64Size(2, __value)
          }
        };
        
        {
          val __value = isReissuable
          if (__value != false) {
            __size += _root_.com.google.protobuf.CodedOutputStream.computeBoolSize(3, __value)
          }
        };
        __size
      }
      final override def serializedSize: _root_.scala.Int = {
        var read = __serializedSizeCachedValue
        if (read == 0) {
          read = __computeSerializedValue()
          __serializedSizeCachedValue = read
        }
        read
      }
      def writeTo(`_output__`: _root_.com.google.protobuf.CodedOutputStream): _root_.scala.Unit = {
        {
          val __v = assetId
          if (__v != _root_.com.google.protobuf.ByteString.EMPTY) {
            _output__.writeBytes(1, __v)
          }
        };
        {
          val __v = amount
          if (__v != 0L) {
            _output__.writeInt64(2, __v)
          }
        };
        {
          val __v = isReissuable
          if (__v != false) {
            _output__.writeBool(3, __v)
          }
        };
      }
      def mergeFrom(`_input__`: _root_.com.google.protobuf.CodedInputStream): com.bdmplatform.protobuf.transaction.InvokeScriptResult.Reissue = {
        var __assetId = this.assetId
        var __amount = this.amount
        var __isReissuable = this.isReissuable
        var _done__ = false
        while (!_done__) {
          val _tag__ = _input__.readTag()
          _tag__ match {
            case 0 => _done__ = true
            case 10 =>
              __assetId = _input__.readBytes()
            case 16 =>
              __amount = _input__.readInt64()
            case 24 =>
              __isReissuable = _input__.readBool()
            case tag => _input__.skipField(tag)
          }
        }
        com.bdmplatform.protobuf.transaction.InvokeScriptResult.Reissue(
            assetId = __assetId,
            amount = __amount,
            isReissuable = __isReissuable
        )
      }
      def withAssetId(__v: _root_.com.google.protobuf.ByteString): Reissue = copy(assetId = __v)
      def withAmount(__v: _root_.scala.Long): Reissue = copy(amount = __v)
      def withIsReissuable(__v: _root_.scala.Boolean): Reissue = copy(isReissuable = __v)
      def getFieldByNumber(__fieldNumber: _root_.scala.Int): _root_.scala.Any = {
        (__fieldNumber: @_root_.scala.unchecked) match {
          case 1 => {
            val __t = assetId
            if (__t != _root_.com.google.protobuf.ByteString.EMPTY) __t else null
          }
          case 2 => {
            val __t = amount
            if (__t != 0L) __t else null
          }
          case 3 => {
            val __t = isReissuable
            if (__t != false) __t else null
          }
        }
      }
      def getField(__field: _root_.scalapb.descriptors.FieldDescriptor): _root_.scalapb.descriptors.PValue = {
        _root_.scala.Predef.require(__field.containingMessage eq companion.scalaDescriptor)
        (__field.number: @_root_.scala.unchecked) match {
          case 1 => _root_.scalapb.descriptors.PByteString(assetId)
          case 2 => _root_.scalapb.descriptors.PLong(amount)
          case 3 => _root_.scalapb.descriptors.PBoolean(isReissuable)
        }
      }
      def toProtoString: _root_.scala.Predef.String = _root_.scalapb.TextFormat.printToUnicodeString(this)
      def companion = com.bdmplatform.protobuf.transaction.InvokeScriptResult.Reissue
  }
  
  object Reissue extends scalapb.GeneratedMessageCompanion[com.bdmplatform.protobuf.transaction.InvokeScriptResult.Reissue] {
    implicit def messageCompanion: scalapb.GeneratedMessageCompanion[com.bdmplatform.protobuf.transaction.InvokeScriptResult.Reissue] = this
    def fromFieldsMap(__fieldsMap: scala.collection.immutable.Map[_root_.com.google.protobuf.Descriptors.FieldDescriptor, _root_.scala.Any]): com.bdmplatform.protobuf.transaction.InvokeScriptResult.Reissue = {
      _root_.scala.Predef.require(__fieldsMap.keys.forall(_.getContainingType() == javaDescriptor), "FieldDescriptor does not match message type.")
      val __fields = javaDescriptor.getFields
      com.bdmplatform.protobuf.transaction.InvokeScriptResult.Reissue(
        __fieldsMap.getOrElse(__fields.get(0), _root_.com.google.protobuf.ByteString.EMPTY).asInstanceOf[_root_.com.google.protobuf.ByteString],
        __fieldsMap.getOrElse(__fields.get(1), 0L).asInstanceOf[_root_.scala.Long],
        __fieldsMap.getOrElse(__fields.get(2), false).asInstanceOf[_root_.scala.Boolean]
      )
    }
    implicit def messageReads: _root_.scalapb.descriptors.Reads[com.bdmplatform.protobuf.transaction.InvokeScriptResult.Reissue] = _root_.scalapb.descriptors.Reads{
      case _root_.scalapb.descriptors.PMessage(__fieldsMap) =>
        _root_.scala.Predef.require(__fieldsMap.keys.forall(_.containingMessage == scalaDescriptor), "FieldDescriptor does not match message type.")
        com.bdmplatform.protobuf.transaction.InvokeScriptResult.Reissue(
          __fieldsMap.get(scalaDescriptor.findFieldByNumber(1).get).map(_.as[_root_.com.google.protobuf.ByteString]).getOrElse(_root_.com.google.protobuf.ByteString.EMPTY),
          __fieldsMap.get(scalaDescriptor.findFieldByNumber(2).get).map(_.as[_root_.scala.Long]).getOrElse(0L),
          __fieldsMap.get(scalaDescriptor.findFieldByNumber(3).get).map(_.as[_root_.scala.Boolean]).getOrElse(false)
        )
      case _ => throw new RuntimeException("Expected PMessage")
    }
    def javaDescriptor: _root_.com.google.protobuf.Descriptors.Descriptor = com.bdmplatform.protobuf.transaction.InvokeScriptResult.javaDescriptor.getNestedTypes.get(2)
    def scalaDescriptor: _root_.scalapb.descriptors.Descriptor = com.bdmplatform.protobuf.transaction.InvokeScriptResult.scalaDescriptor.nestedMessages(2)
    def messageCompanionForFieldNumber(__number: _root_.scala.Int): _root_.scalapb.GeneratedMessageCompanion[_] = throw new MatchError(__number)
    lazy val nestedMessagesCompanions: Seq[_root_.scalapb.GeneratedMessageCompanion[_]] = Seq.empty
    def enumCompanionForFieldNumber(__fieldNumber: _root_.scala.Int): _root_.scalapb.GeneratedEnumCompanion[_] = throw new MatchError(__fieldNumber)
    lazy val defaultInstance = com.bdmplatform.protobuf.transaction.InvokeScriptResult.Reissue(
    )
    implicit class ReissueLens[UpperPB](_l: _root_.scalapb.lenses.Lens[UpperPB, com.bdmplatform.protobuf.transaction.InvokeScriptResult.Reissue]) extends _root_.scalapb.lenses.ObjectLens[UpperPB, com.bdmplatform.protobuf.transaction.InvokeScriptResult.Reissue](_l) {
      def assetId: _root_.scalapb.lenses.Lens[UpperPB, _root_.com.google.protobuf.ByteString] = field(_.assetId)((c_, f_) => c_.copy(assetId = f_))
      def amount: _root_.scalapb.lenses.Lens[UpperPB, _root_.scala.Long] = field(_.amount)((c_, f_) => c_.copy(amount = f_))
      def isReissuable: _root_.scalapb.lenses.Lens[UpperPB, _root_.scala.Boolean] = field(_.isReissuable)((c_, f_) => c_.copy(isReissuable = f_))
    }
    final val ASSET_ID_FIELD_NUMBER = 1
    final val AMOUNT_FIELD_NUMBER = 2
    final val IS_REISSUABLE_FIELD_NUMBER = 3
    def of(
      assetId: _root_.com.google.protobuf.ByteString,
      amount: _root_.scala.Long,
      isReissuable: _root_.scala.Boolean
    ): _root_.com.bdmplatform.protobuf.transaction.InvokeScriptResult.Reissue = _root_.com.bdmplatform.protobuf.transaction.InvokeScriptResult.Reissue(
      assetId,
      amount,
      isReissuable
    )
  }
  
  @SerialVersionUID(0L)
  final case class Burn(
      assetId: _root_.com.google.protobuf.ByteString = _root_.com.google.protobuf.ByteString.EMPTY,
      amount: _root_.scala.Long = 0L
      ) extends scalapb.GeneratedMessage with scalapb.Message[Burn] with scalapb.lenses.Updatable[Burn] {
      @transient
      private[this] var __serializedSizeCachedValue: _root_.scala.Int = 0
      private[this] def __computeSerializedValue(): _root_.scala.Int = {
        var __size = 0
        
        {
          val __value = assetId
          if (__value != _root_.com.google.protobuf.ByteString.EMPTY) {
            __size += _root_.com.google.protobuf.CodedOutputStream.computeBytesSize(1, __value)
          }
        };
        
        {
          val __value = amount
          if (__value != 0L) {
            __size += _root_.com.google.protobuf.CodedOutputStream.computeInt64Size(2, __value)
          }
        };
        __size
      }
      final override def serializedSize: _root_.scala.Int = {
        var read = __serializedSizeCachedValue
        if (read == 0) {
          read = __computeSerializedValue()
          __serializedSizeCachedValue = read
        }
        read
      }
      def writeTo(`_output__`: _root_.com.google.protobuf.CodedOutputStream): _root_.scala.Unit = {
        {
          val __v = assetId
          if (__v != _root_.com.google.protobuf.ByteString.EMPTY) {
            _output__.writeBytes(1, __v)
          }
        };
        {
          val __v = amount
          if (__v != 0L) {
            _output__.writeInt64(2, __v)
          }
        };
      }
      def mergeFrom(`_input__`: _root_.com.google.protobuf.CodedInputStream): com.bdmplatform.protobuf.transaction.InvokeScriptResult.Burn = {
        var __assetId = this.assetId
        var __amount = this.amount
        var _done__ = false
        while (!_done__) {
          val _tag__ = _input__.readTag()
          _tag__ match {
            case 0 => _done__ = true
            case 10 =>
              __assetId = _input__.readBytes()
            case 16 =>
              __amount = _input__.readInt64()
            case tag => _input__.skipField(tag)
          }
        }
        com.bdmplatform.protobuf.transaction.InvokeScriptResult.Burn(
            assetId = __assetId,
            amount = __amount
        )
      }
      def withAssetId(__v: _root_.com.google.protobuf.ByteString): Burn = copy(assetId = __v)
      def withAmount(__v: _root_.scala.Long): Burn = copy(amount = __v)
      def getFieldByNumber(__fieldNumber: _root_.scala.Int): _root_.scala.Any = {
        (__fieldNumber: @_root_.scala.unchecked) match {
          case 1 => {
            val __t = assetId
            if (__t != _root_.com.google.protobuf.ByteString.EMPTY) __t else null
          }
          case 2 => {
            val __t = amount
            if (__t != 0L) __t else null
          }
        }
      }
      def getField(__field: _root_.scalapb.descriptors.FieldDescriptor): _root_.scalapb.descriptors.PValue = {
        _root_.scala.Predef.require(__field.containingMessage eq companion.scalaDescriptor)
        (__field.number: @_root_.scala.unchecked) match {
          case 1 => _root_.scalapb.descriptors.PByteString(assetId)
          case 2 => _root_.scalapb.descriptors.PLong(amount)
        }
      }
      def toProtoString: _root_.scala.Predef.String = _root_.scalapb.TextFormat.printToUnicodeString(this)
      def companion = com.bdmplatform.protobuf.transaction.InvokeScriptResult.Burn
  }
  
  object Burn extends scalapb.GeneratedMessageCompanion[com.bdmplatform.protobuf.transaction.InvokeScriptResult.Burn] {
    implicit def messageCompanion: scalapb.GeneratedMessageCompanion[com.bdmplatform.protobuf.transaction.InvokeScriptResult.Burn] = this
    def fromFieldsMap(__fieldsMap: scala.collection.immutable.Map[_root_.com.google.protobuf.Descriptors.FieldDescriptor, _root_.scala.Any]): com.bdmplatform.protobuf.transaction.InvokeScriptResult.Burn = {
      _root_.scala.Predef.require(__fieldsMap.keys.forall(_.getContainingType() == javaDescriptor), "FieldDescriptor does not match message type.")
      val __fields = javaDescriptor.getFields
      com.bdmplatform.protobuf.transaction.InvokeScriptResult.Burn(
        __fieldsMap.getOrElse(__fields.get(0), _root_.com.google.protobuf.ByteString.EMPTY).asInstanceOf[_root_.com.google.protobuf.ByteString],
        __fieldsMap.getOrElse(__fields.get(1), 0L).asInstanceOf[_root_.scala.Long]
      )
    }
    implicit def messageReads: _root_.scalapb.descriptors.Reads[com.bdmplatform.protobuf.transaction.InvokeScriptResult.Burn] = _root_.scalapb.descriptors.Reads{
      case _root_.scalapb.descriptors.PMessage(__fieldsMap) =>
        _root_.scala.Predef.require(__fieldsMap.keys.forall(_.containingMessage == scalaDescriptor), "FieldDescriptor does not match message type.")
        com.bdmplatform.protobuf.transaction.InvokeScriptResult.Burn(
          __fieldsMap.get(scalaDescriptor.findFieldByNumber(1).get).map(_.as[_root_.com.google.protobuf.ByteString]).getOrElse(_root_.com.google.protobuf.ByteString.EMPTY),
          __fieldsMap.get(scalaDescriptor.findFieldByNumber(2).get).map(_.as[_root_.scala.Long]).getOrElse(0L)
        )
      case _ => throw new RuntimeException("Expected PMessage")
    }
    def javaDescriptor: _root_.com.google.protobuf.Descriptors.Descriptor = com.bdmplatform.protobuf.transaction.InvokeScriptResult.javaDescriptor.getNestedTypes.get(3)
    def scalaDescriptor: _root_.scalapb.descriptors.Descriptor = com.bdmplatform.protobuf.transaction.InvokeScriptResult.scalaDescriptor.nestedMessages(3)
    def messageCompanionForFieldNumber(__number: _root_.scala.Int): _root_.scalapb.GeneratedMessageCompanion[_] = throw new MatchError(__number)
    lazy val nestedMessagesCompanions: Seq[_root_.scalapb.GeneratedMessageCompanion[_]] = Seq.empty
    def enumCompanionForFieldNumber(__fieldNumber: _root_.scala.Int): _root_.scalapb.GeneratedEnumCompanion[_] = throw new MatchError(__fieldNumber)
    lazy val defaultInstance = com.bdmplatform.protobuf.transaction.InvokeScriptResult.Burn(
    )
    implicit class BurnLens[UpperPB](_l: _root_.scalapb.lenses.Lens[UpperPB, com.bdmplatform.protobuf.transaction.InvokeScriptResult.Burn]) extends _root_.scalapb.lenses.ObjectLens[UpperPB, com.bdmplatform.protobuf.transaction.InvokeScriptResult.Burn](_l) {
      def assetId: _root_.scalapb.lenses.Lens[UpperPB, _root_.com.google.protobuf.ByteString] = field(_.assetId)((c_, f_) => c_.copy(assetId = f_))
      def amount: _root_.scalapb.lenses.Lens[UpperPB, _root_.scala.Long] = field(_.amount)((c_, f_) => c_.copy(amount = f_))
    }
    final val ASSET_ID_FIELD_NUMBER = 1
    final val AMOUNT_FIELD_NUMBER = 2
    def of(
      assetId: _root_.com.google.protobuf.ByteString,
      amount: _root_.scala.Long
    ): _root_.com.bdmplatform.protobuf.transaction.InvokeScriptResult.Burn = _root_.com.bdmplatform.protobuf.transaction.InvokeScriptResult.Burn(
      assetId,
      amount
    )
  }
  
  implicit class InvokeScriptResultLens[UpperPB](_l: _root_.scalapb.lenses.Lens[UpperPB, com.bdmplatform.protobuf.transaction.InvokeScriptResult]) extends _root_.scalapb.lenses.ObjectLens[UpperPB, com.bdmplatform.protobuf.transaction.InvokeScriptResult](_l) {
    def data: _root_.scalapb.lenses.Lens[UpperPB, _root_.scala.collection.Seq[com.bdmplatform.protobuf.transaction.DataTransactionData.DataEntry]] = field(_.data)((c_, f_) => c_.copy(data = f_))
    def transfers: _root_.scalapb.lenses.Lens[UpperPB, _root_.scala.collection.Seq[com.bdmplatform.protobuf.transaction.InvokeScriptResult.Payment]] = field(_.transfers)((c_, f_) => c_.copy(transfers = f_))
    def issues: _root_.scalapb.lenses.Lens[UpperPB, _root_.scala.collection.Seq[com.bdmplatform.protobuf.transaction.InvokeScriptResult.Issue]] = field(_.issues)((c_, f_) => c_.copy(issues = f_))
    def reissues: _root_.scalapb.lenses.Lens[UpperPB, _root_.scala.collection.Seq[com.bdmplatform.protobuf.transaction.InvokeScriptResult.Reissue]] = field(_.reissues)((c_, f_) => c_.copy(reissues = f_))
    def burns: _root_.scalapb.lenses.Lens[UpperPB, _root_.scala.collection.Seq[com.bdmplatform.protobuf.transaction.InvokeScriptResult.Burn]] = field(_.burns)((c_, f_) => c_.copy(burns = f_))
  }
  final val DATA_FIELD_NUMBER = 1
  final val TRANSFERS_FIELD_NUMBER = 2
  final val ISSUES_FIELD_NUMBER = 3
  final val REISSUES_FIELD_NUMBER = 4
  final val BURNS_FIELD_NUMBER = 5
  def of(
    data: _root_.scala.collection.Seq[com.bdmplatform.protobuf.transaction.DataTransactionData.DataEntry],
    transfers: _root_.scala.collection.Seq[com.bdmplatform.protobuf.transaction.InvokeScriptResult.Payment],
    issues: _root_.scala.collection.Seq[com.bdmplatform.protobuf.transaction.InvokeScriptResult.Issue],
    reissues: _root_.scala.collection.Seq[com.bdmplatform.protobuf.transaction.InvokeScriptResult.Reissue],
    burns: _root_.scala.collection.Seq[com.bdmplatform.protobuf.transaction.InvokeScriptResult.Burn]
  ): _root_.com.bdmplatform.protobuf.transaction.InvokeScriptResult = _root_.com.bdmplatform.protobuf.transaction.InvokeScriptResult(
    data,
    transfers,
    issues,
    reissues,
    burns
  )
}
