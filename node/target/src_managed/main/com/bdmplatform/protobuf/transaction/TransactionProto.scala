// Generated by the Scala Plugin for the Protocol Buffer Compiler.
// Do not edit!
//
// Protofile syntax: PROTO3

package com.bdmplatform.protobuf.transaction

object TransactionProto extends _root_.scalapb.GeneratedFileObject {
  lazy val dependencies: Seq[_root_.scalapb.GeneratedFileObject] = Seq(
    com.bdmplatform.protobuf.AmountProto,
    com.bdmplatform.protobuf.transaction.ScriptProto,
    com.bdmplatform.protobuf.transaction.RecipientProto,
    com.bdmplatform.protobuf.order.OrderProto
  )
  lazy val messagesCompanions: Seq[_root_.scalapb.GeneratedMessageCompanion[_]] = Seq(
    com.bdmplatform.protobuf.transaction.SignedTransaction,
    com.bdmplatform.protobuf.transaction.Transaction,
    com.bdmplatform.protobuf.transaction.GenesisTransactionData,
    com.bdmplatform.protobuf.transaction.PaymentTransactionData,
    com.bdmplatform.protobuf.transaction.Attachment,
    com.bdmplatform.protobuf.transaction.TransferTransactionData,
    com.bdmplatform.protobuf.transaction.CreateAliasTransactionData,
    com.bdmplatform.protobuf.transaction.DataTransactionData,
    com.bdmplatform.protobuf.transaction.MassTransferTransactionData,
    com.bdmplatform.protobuf.transaction.LeaseTransactionData,
    com.bdmplatform.protobuf.transaction.LeaseCancelTransactionData,
    com.bdmplatform.protobuf.transaction.BurnTransactionData,
    com.bdmplatform.protobuf.transaction.IssueTransactionData,
    com.bdmplatform.protobuf.transaction.ReissueTransactionData,
    com.bdmplatform.protobuf.transaction.SetAssetScriptTransactionData,
    com.bdmplatform.protobuf.transaction.SetScriptTransactionData,
    com.bdmplatform.protobuf.transaction.ExchangeTransactionData,
    com.bdmplatform.protobuf.transaction.SponsorFeeTransactionData,
    com.bdmplatform.protobuf.transaction.InvokeScriptTransactionData,
    com.bdmplatform.protobuf.transaction.UpdateAssetInfoTransactionData
  )
  private lazy val ProtoBytes: Array[Byte] =
      scalapb.Encoding.fromBase64(scala.collection.Seq(
  """ChViZG0vdHJhbnNhY3Rpb24ucHJvdG8SA2JkbRoQYmRtL2Ftb3VudC5wcm90bxoQYmRtL3NjcmlwdC5wcm90bxoTYmRtL3JlY
  2lwaWVudC5wcm90bxoPYmRtL29yZGVyLnByb3RvIn4KEVNpZ25lZFRyYW5zYWN0aW9uEkQKC3RyYW5zYWN0aW9uGAEgASgLMhAuY
  mRtLlRyYW5zYWN0aW9uQhDiPw0SC3RyYW5zYWN0aW9uUgt0cmFuc2FjdGlvbhIjCgZwcm9vZnMYAiADKAxCC+I/CBIGcHJvb2ZzU
  gZwcm9vZnMi2gwKC1RyYW5zYWN0aW9uEicKCGNoYWluX2lkGAEgASgFQgziPwkSB2NoYWluSWRSB2NoYWluSWQSQAoRc2VuZGVyX
  3B1YmxpY19rZXkYAiABKAxCFOI/ERIPc2VuZGVyUHVibGljS2V5Ug9zZW5kZXJQdWJsaWNLZXkSJwoDZmVlGAMgASgLMgsuYmRtL
  kFtb3VudEII4j8FEgNmZWVSA2ZlZRIsCgl0aW1lc3RhbXAYBCABKANCDuI/CxIJdGltZXN0YW1wUgl0aW1lc3RhbXASJgoHdmVyc
  2lvbhgFIAEoBUIM4j8JEgd2ZXJzaW9uUgd2ZXJzaW9uEkUKB2dlbmVzaXMYZSABKAsyGy5iZG0uR2VuZXNpc1RyYW5zYWN0aW9uR
  GF0YUIM4j8JEgdnZW5lc2lzSABSB2dlbmVzaXMSRQoHcGF5bWVudBhmIAEoCzIbLmJkbS5QYXltZW50VHJhbnNhY3Rpb25EYXRhQ
  gziPwkSB3BheW1lbnRIAFIHcGF5bWVudBI9CgVpc3N1ZRhnIAEoCzIZLmJkbS5Jc3N1ZVRyYW5zYWN0aW9uRGF0YUIK4j8HEgVpc
  3N1ZUgAUgVpc3N1ZRJJCgh0cmFuc2ZlchhoIAEoCzIcLmJkbS5UcmFuc2ZlclRyYW5zYWN0aW9uRGF0YUIN4j8KEgh0cmFuc2Zlc
  kgAUgh0cmFuc2ZlchJFCgdyZWlzc3VlGGkgASgLMhsuYmRtLlJlaXNzdWVUcmFuc2FjdGlvbkRhdGFCDOI/CRIHcmVpc3N1ZUgAU
  gdyZWlzc3VlEjkKBGJ1cm4YaiABKAsyGC5iZG0uQnVyblRyYW5zYWN0aW9uRGF0YUIJ4j8GEgRidXJuSABSBGJ1cm4SSQoIZXhja
  GFuZ2UYayABKAsyHC5iZG0uRXhjaGFuZ2VUcmFuc2FjdGlvbkRhdGFCDeI/ChIIZXhjaGFuZ2VIAFIIZXhjaGFuZ2USPQoFbGVhc
  2UYbCABKAsyGS5iZG0uTGVhc2VUcmFuc2FjdGlvbkRhdGFCCuI/BxIFbGVhc2VIAFIFbGVhc2USVgoMbGVhc2VfY2FuY2VsGG0gA
  SgLMh8uYmRtLkxlYXNlQ2FuY2VsVHJhbnNhY3Rpb25EYXRhQhDiPw0SC2xlYXNlQ2FuY2VsSABSC2xlYXNlQ2FuY2VsElYKDGNyZ
  WF0ZV9hbGlhcxhuIAEoCzIfLmJkbS5DcmVhdGVBbGlhc1RyYW5zYWN0aW9uRGF0YUIQ4j8NEgtjcmVhdGVBbGlhc0gAUgtjcmVhd
  GVBbGlhcxJaCg1tYXNzX3RyYW5zZmVyGG8gASgLMiAuYmRtLk1hc3NUcmFuc2ZlclRyYW5zYWN0aW9uRGF0YUIR4j8OEgxtYXNzV
  HJhbnNmZXJIAFIMbWFzc1RyYW5zZmVyElsKEGRhdGFfdHJhbnNhY3Rpb24YcCABKAsyGC5iZG0uRGF0YVRyYW5zYWN0aW9uRGF0Y
  UIU4j8REg9kYXRhVHJhbnNhY3Rpb25IAFIPZGF0YVRyYW5zYWN0aW9uEk4KCnNldF9zY3JpcHQYcSABKAsyHS5iZG0uU2V0U2Nya
  XB0VHJhbnNhY3Rpb25EYXRhQg7iPwsSCXNldFNjcmlwdEgAUglzZXRTY3JpcHQSUgoLc3BvbnNvcl9mZWUYciABKAsyHi5iZG0uU
  3BvbnNvckZlZVRyYW5zYWN0aW9uRGF0YUIP4j8MEgpzcG9uc29yRmVlSABSCnNwb25zb3JGZWUSYwoQc2V0X2Fzc2V0X3Njcmlwd
  BhzIAEoCzIiLmJkbS5TZXRBc3NldFNjcmlwdFRyYW5zYWN0aW9uRGF0YUIT4j8QEg5zZXRBc3NldFNjcmlwdEgAUg5zZXRBc3Nld
  FNjcmlwdBJaCg1pbnZva2Vfc2NyaXB0GHQgASgLMiAuYmRtLkludm9rZVNjcmlwdFRyYW5zYWN0aW9uRGF0YUIR4j8OEgxpbnZva
  2VTY3JpcHRIAFIMaW52b2tlU2NyaXB0EmcKEXVwZGF0ZV9hc3NldF9pbmZvGHUgASgLMiMuYmRtLlVwZGF0ZUFzc2V0SW5mb1RyY
  W5zYWN0aW9uRGF0YUIU4j8REg91cGRhdGVBc3NldEluZm9IAFIPdXBkYXRlQXNzZXRJbmZvQgYKBGRhdGEigQEKFkdlbmVzaXNUc
  mFuc2FjdGlvbkRhdGESQgoRcmVjaXBpZW50X2FkZHJlc3MYASABKAxCFeI/EhIQcmVjaXBpZW50QWRkcmVzc1IQcmVjaXBpZW50Q
  WRkcmVzcxIjCgZhbW91bnQYAiABKANCC+I/CBIGYW1vdW50UgZhbW91bnQigQEKFlBheW1lbnRUcmFuc2FjdGlvbkRhdGESQgoRc
  mVjaXBpZW50X2FkZHJlc3MYASABKAxCFeI/EhIQcmVjaXBpZW50QWRkcmVzc1IQcmVjaXBpZW50QWRkcmVzcxIjCgZhbW91bnQYA
  iABKANCC+I/CBIGYW1vdW50UgZhbW91bnQi5wEKCkF0dGFjaG1lbnQSLAoJaW50X3ZhbHVlGAEgASgDQg3iPwoSCGludFZhbHVlS
  ABSCGludFZhbHVlEi8KCmJvb2xfdmFsdWUYAiABKAhCDuI/CxIJYm9vbFZhbHVlSABSCWJvb2xWYWx1ZRI1CgxiaW5hcnlfdmFsd
  WUYAyABKAxCEOI/DRILYmluYXJ5VmFsdWVIAFILYmluYXJ5VmFsdWUSNQoMc3RyaW5nX3ZhbHVlGAQgASgJQhDiPw0SC3N0cmluZ
  1ZhbHVlSABSC3N0cmluZ1ZhbHVlQgwKCmF0dGFjaG1lbnQiywEKF1RyYW5zZmVyVHJhbnNhY3Rpb25EYXRhEjwKCXJlY2lwaWVud
  BgBIAEoCzIOLmJkbS5SZWNpcGllbnRCDuI/CxIJcmVjaXBpZW50UglyZWNpcGllbnQSMAoGYW1vdW50GAIgASgLMgsuYmRtLkFtb
  3VudEIL4j8IEgZhbW91bnRSBmFtb3VudBJACgphdHRhY2htZW50GAMgASgLMg8uYmRtLkF0dGFjaG1lbnRCD+I/DBIKYXR0YWNob
  WVudFIKYXR0YWNobWVudCI+ChpDcmVhdGVBbGlhc1RyYW5zYWN0aW9uRGF0YRIgCgVhbGlhcxgBIAEoCUIK4j8HEgVhbGlhc1IFY
  WxpYXMi2AIKE0RhdGFUcmFuc2FjdGlvbkRhdGESQQoEZGF0YRgBIAMoCzIiLmJkbS5EYXRhVHJhbnNhY3Rpb25EYXRhLkRhdGFFb
  nRyeUIJ4j8GEgRkYXRhUgRkYXRhGv0BCglEYXRhRW50cnkSGgoDa2V5GAEgASgJQgjiPwUSA2tleVIDa2V5EiwKCWludF92YWx1Z
  RgKIAEoA0IN4j8KEghpbnRWYWx1ZUgAUghpbnRWYWx1ZRIvCgpib29sX3ZhbHVlGAsgASgIQg7iPwsSCWJvb2xWYWx1ZUgAUglib
  29sVmFsdWUSNQoMYmluYXJ5X3ZhbHVlGAwgASgMQhDiPw0SC2JpbmFyeVZhbHVlSABSC2JpbmFyeVZhbHVlEjUKDHN0cmluZ192Y
  Wx1ZRgNIAEoCUIQ4j8NEgtzdHJpbmdWYWx1ZUgAUgtzdHJpbmdWYWx1ZUIHCgV2YWx1ZSLKAgobTWFzc1RyYW5zZmVyVHJhbnNhY
  3Rpb25EYXRhEicKCGFzc2V0X2lkGAEgASgMQgziPwkSB2Fzc2V0SWRSB2Fzc2V0SWQSVwoJdHJhbnNmZXJzGAIgAygLMikuYmRtL
  k1hc3NUcmFuc2ZlclRyYW5zYWN0aW9uRGF0YS5UcmFuc2ZlckIO4j8LEgl0cmFuc2ZlcnNSCXRyYW5zZmVycxJACgphdHRhY2htZ
  W50GAMgASgLMg8uYmRtLkF0dGFjaG1lbnRCD+I/DBIKYXR0YWNobWVudFIKYXR0YWNobWVudBpnCghUcmFuc2ZlchI2CgdhZGRyZ
  XNzGAEgASgLMg4uYmRtLlJlY2lwaWVudEIM4j8JEgdhZGRyZXNzUgdhZGRyZXNzEiMKBmFtb3VudBgCIAEoA0IL4j8IEgZhbW91b
  nRSBmFtb3VudCJ5ChRMZWFzZVRyYW5zYWN0aW9uRGF0YRI8CglyZWNpcGllbnQYASABKAsyDi5iZG0uUmVjaXBpZW50Qg7iPwsSC
  XJlY2lwaWVudFIJcmVjaXBpZW50EiMKBmFtb3VudBgCIAEoA0IL4j8IEgZhbW91bnRSBmFtb3VudCJFChpMZWFzZUNhbmNlbFRyY
  W5zYWN0aW9uRGF0YRInCghsZWFzZV9pZBgBIAEoDEIM4j8JEgdsZWFzZUlkUgdsZWFzZUlkIlcKE0J1cm5UcmFuc2FjdGlvbkRhd
  GESQAoMYXNzZXRfYW1vdW50GAEgASgLMgsuYmRtLkFtb3VudEIQ4j8NEgthc3NldEFtb3VudFILYXNzZXRBbW91bnQinAIKFElzc
  3VlVHJhbnNhY3Rpb25EYXRhEh0KBG5hbWUYASABKAlCCeI/BhIEbmFtZVIEbmFtZRIyCgtkZXNjcmlwdGlvbhgCIAEoCUIQ4j8NE
  gtkZXNjcmlwdGlvblILZGVzY3JpcHRpb24SIwoGYW1vdW50GAMgASgDQgviPwgSBmFtb3VudFIGYW1vdW50EikKCGRlY2ltYWxzG
  AQgASgFQg3iPwoSCGRlY2ltYWxzUghkZWNpbWFscxIvCgpyZWlzc3VhYmxlGAUgASgIQg/iPwwSCnJlaXNzdWFibGVSCnJlaXNzd
  WFibGUSMAoGc2NyaXB0GAYgASgLMgsuYmRtLlNjcmlwdEIL4j8IEgZzY3JpcHRSBnNjcmlwdCKLAQoWUmVpc3N1ZVRyYW5zYWN0a
  W9uRGF0YRJACgxhc3NldF9hbW91bnQYASABKAsyCy5iZG0uQW1vdW50QhDiPw0SC2Fzc2V0QW1vdW50Ugthc3NldEFtb3VudBIvC
  gpyZWlzc3VhYmxlGAIgASgIQg/iPwwSCnJlaXNzdWFibGVSCnJlaXNzdWFibGUiegodU2V0QXNzZXRTY3JpcHRUcmFuc2FjdGlvb
  kRhdGESJwoIYXNzZXRfaWQYASABKAxCDOI/CRIHYXNzZXRJZFIHYXNzZXRJZBIwCgZzY3JpcHQYAiABKAsyCy5iZG0uU2NyaXB0Q
  gviPwgSBnNjcmlwdFIGc2NyaXB0IkwKGFNldFNjcmlwdFRyYW5zYWN0aW9uRGF0YRIwCgZzY3JpcHQYAiABKAsyCy5iZG0uU2Nya
  XB0QgviPwgSBnNjcmlwdFIGc2NyaXB0IowCChdFeGNoYW5nZVRyYW5zYWN0aW9uRGF0YRIjCgZhbW91bnQYASABKANCC+I/CBIGY
  W1vdW50UgZhbW91bnQSIAoFcHJpY2UYAiABKANCCuI/BxIFcHJpY2VSBXByaWNlEjoKD2J1eV9tYXRjaGVyX2ZlZRgDIAEoA0IS4
  j8PEg1idXlNYXRjaGVyRmVlUg1idXlNYXRjaGVyRmVlEj0KEHNlbGxfbWF0Y2hlcl9mZWUYBCABKANCE+I/EBIOc2VsbE1hdGNoZ
  XJGZWVSDnNlbGxNYXRjaGVyRmVlEi8KBm9yZGVycxgFIAMoCzIKLmJkbS5PcmRlckIL4j8IEgZvcmRlcnNSBm9yZGVycyJOChlTc
  G9uc29yRmVlVHJhbnNhY3Rpb25EYXRhEjEKB21pbl9mZWUYASABKAsyCy5iZG0uQW1vdW50QgviPwgSBm1pbkZlZVIGbWluRmVlI
  r0BChtJbnZva2VTY3JpcHRUcmFuc2FjdGlvbkRhdGESLgoFZF9hcHAYASABKAsyDi5iZG0uUmVjaXBpZW50QgniPwYSBGRBcHBSB
  GRBcHASNgoNZnVuY3Rpb25fY2FsbBgCIAEoDEIR4j8OEgxmdW5jdGlvbkNhbGxSDGZ1bmN0aW9uQ2FsbBI2CghwYXltZW50cxgDI
  AMoCzILLmJkbS5BbW91bnRCDeI/ChIIcGF5bWVudHNSCHBheW1lbnRzIpwBCh5VcGRhdGVBc3NldEluZm9UcmFuc2FjdGlvbkRhd
  GESJwoIYXNzZXRfaWQYASABKAxCDOI/CRIHYXNzZXRJZFIHYXNzZXRJZBIdCgRuYW1lGAIgASgJQgniPwYSBG5hbWVSBG5hbWUSM
  goLZGVzY3JpcHRpb24YAyABKAlCEOI/DRILZGVzY3JpcHRpb25SC2Rlc2NyaXB0aW9uQiwKJGNvbS5iZG1wbGF0Zm9ybS5wcm90b
  2J1Zi50cmFuc2FjdGlvbqoCA0JkbWIGcHJvdG8z"""
      ).mkString)
  lazy val scalaDescriptor: _root_.scalapb.descriptors.FileDescriptor = {
    val scalaProto = com.google.protobuf.descriptor.FileDescriptorProto.parseFrom(ProtoBytes)
    _root_.scalapb.descriptors.FileDescriptor.buildFrom(scalaProto, dependencies.map(_.scalaDescriptor))
  }
  lazy val javaDescriptor: com.google.protobuf.Descriptors.FileDescriptor = {
    val javaProto = com.google.protobuf.DescriptorProtos.FileDescriptorProto.parseFrom(ProtoBytes)
    com.google.protobuf.Descriptors.FileDescriptor.buildFrom(javaProto, Array(
      com.bdmplatform.protobuf.AmountProto.javaDescriptor,
      com.bdmplatform.protobuf.transaction.ScriptProto.javaDescriptor,
      com.bdmplatform.protobuf.transaction.RecipientProto.javaDescriptor,
      com.bdmplatform.protobuf.order.OrderProto.javaDescriptor
    ))
  }
  @deprecated("Use javaDescriptor instead. In a future version this will refer to scalaDescriptor.", "ScalaPB 0.5.47")
  def descriptor: com.google.protobuf.Descriptors.FileDescriptor = javaDescriptor
}