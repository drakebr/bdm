// Generated by the Scala Plugin for the Protocol Buffer Compiler.
// Do not edit!
//
// Protofile syntax: PROTO3

package com.bdmplatform.api.grpc

@SerialVersionUID(0L)
final case class ActivationStatusResponse(
    height: _root_.scala.Int = 0,
    votingInterval: _root_.scala.Int = 0,
    votingThreshold: _root_.scala.Int = 0,
    nextCheck: _root_.scala.Int = 0,
    features: _root_.scala.collection.Seq[com.bdmplatform.api.grpc.FeatureActivationStatus] = _root_.scala.collection.Seq.empty
    ) extends scalapb.GeneratedMessage with scalapb.Message[ActivationStatusResponse] with scalapb.lenses.Updatable[ActivationStatusResponse] {
    @transient
    private[this] var __serializedSizeCachedValue: _root_.scala.Int = 0
    private[this] def __computeSerializedValue(): _root_.scala.Int = {
      var __size = 0
      
      {
        val __value = height
        if (__value != 0) {
          __size += _root_.com.google.protobuf.CodedOutputStream.computeInt32Size(1, __value)
        }
      };
      
      {
        val __value = votingInterval
        if (__value != 0) {
          __size += _root_.com.google.protobuf.CodedOutputStream.computeInt32Size(2, __value)
        }
      };
      
      {
        val __value = votingThreshold
        if (__value != 0) {
          __size += _root_.com.google.protobuf.CodedOutputStream.computeInt32Size(3, __value)
        }
      };
      
      {
        val __value = nextCheck
        if (__value != 0) {
          __size += _root_.com.google.protobuf.CodedOutputStream.computeInt32Size(4, __value)
        }
      };
      features.foreach { __item =>
        val __value = __item
        __size += 1 + _root_.com.google.protobuf.CodedOutputStream.computeUInt32SizeNoTag(__value.serializedSize) + __value.serializedSize
      }
      __size
    }
    final override def serializedSize: _root_.scala.Int = {
      var read = __serializedSizeCachedValue
      if (read == 0) {
        read = __computeSerializedValue()
        __serializedSizeCachedValue = read
      }
      read
    }
    def writeTo(`_output__`: _root_.com.google.protobuf.CodedOutputStream): _root_.scala.Unit = {
      {
        val __v = height
        if (__v != 0) {
          _output__.writeInt32(1, __v)
        }
      };
      {
        val __v = votingInterval
        if (__v != 0) {
          _output__.writeInt32(2, __v)
        }
      };
      {
        val __v = votingThreshold
        if (__v != 0) {
          _output__.writeInt32(3, __v)
        }
      };
      {
        val __v = nextCheck
        if (__v != 0) {
          _output__.writeInt32(4, __v)
        }
      };
      features.foreach { __v =>
        val __m = __v
        _output__.writeTag(5, 2)
        _output__.writeUInt32NoTag(__m.serializedSize)
        __m.writeTo(_output__)
      };
    }
    def mergeFrom(`_input__`: _root_.com.google.protobuf.CodedInputStream): com.bdmplatform.api.grpc.ActivationStatusResponse = {
      var __height = this.height
      var __votingInterval = this.votingInterval
      var __votingThreshold = this.votingThreshold
      var __nextCheck = this.nextCheck
      val __features = (_root_.scala.collection.immutable.Vector.newBuilder[com.bdmplatform.api.grpc.FeatureActivationStatus] ++= this.features)
      var _done__ = false
      while (!_done__) {
        val _tag__ = _input__.readTag()
        _tag__ match {
          case 0 => _done__ = true
          case 8 =>
            __height = _input__.readInt32()
          case 16 =>
            __votingInterval = _input__.readInt32()
          case 24 =>
            __votingThreshold = _input__.readInt32()
          case 32 =>
            __nextCheck = _input__.readInt32()
          case 42 =>
            __features += _root_.scalapb.LiteParser.readMessage(_input__, com.bdmplatform.api.grpc.FeatureActivationStatus.defaultInstance)
          case tag => _input__.skipField(tag)
        }
      }
      com.bdmplatform.api.grpc.ActivationStatusResponse(
          height = __height,
          votingInterval = __votingInterval,
          votingThreshold = __votingThreshold,
          nextCheck = __nextCheck,
          features = __features.result()
      )
    }
    def withHeight(__v: _root_.scala.Int): ActivationStatusResponse = copy(height = __v)
    def withVotingInterval(__v: _root_.scala.Int): ActivationStatusResponse = copy(votingInterval = __v)
    def withVotingThreshold(__v: _root_.scala.Int): ActivationStatusResponse = copy(votingThreshold = __v)
    def withNextCheck(__v: _root_.scala.Int): ActivationStatusResponse = copy(nextCheck = __v)
    def clearFeatures = copy(features = _root_.scala.collection.Seq.empty)
    def addFeatures(__vs: com.bdmplatform.api.grpc.FeatureActivationStatus*): ActivationStatusResponse = addAllFeatures(__vs)
    def addAllFeatures(__vs: TraversableOnce[com.bdmplatform.api.grpc.FeatureActivationStatus]): ActivationStatusResponse = copy(features = features ++ __vs)
    def withFeatures(__v: _root_.scala.collection.Seq[com.bdmplatform.api.grpc.FeatureActivationStatus]): ActivationStatusResponse = copy(features = __v)
    def getFieldByNumber(__fieldNumber: _root_.scala.Int): _root_.scala.Any = {
      (__fieldNumber: @_root_.scala.unchecked) match {
        case 1 => {
          val __t = height
          if (__t != 0) __t else null
        }
        case 2 => {
          val __t = votingInterval
          if (__t != 0) __t else null
        }
        case 3 => {
          val __t = votingThreshold
          if (__t != 0) __t else null
        }
        case 4 => {
          val __t = nextCheck
          if (__t != 0) __t else null
        }
        case 5 => features
      }
    }
    def getField(__field: _root_.scalapb.descriptors.FieldDescriptor): _root_.scalapb.descriptors.PValue = {
      _root_.scala.Predef.require(__field.containingMessage eq companion.scalaDescriptor)
      (__field.number: @_root_.scala.unchecked) match {
        case 1 => _root_.scalapb.descriptors.PInt(height)
        case 2 => _root_.scalapb.descriptors.PInt(votingInterval)
        case 3 => _root_.scalapb.descriptors.PInt(votingThreshold)
        case 4 => _root_.scalapb.descriptors.PInt(nextCheck)
        case 5 => _root_.scalapb.descriptors.PRepeated(features.map(_.toPMessage)(_root_.scala.collection.breakOut))
      }
    }
    def toProtoString: _root_.scala.Predef.String = _root_.scalapb.TextFormat.printToUnicodeString(this)
    def companion = com.bdmplatform.api.grpc.ActivationStatusResponse
}

object ActivationStatusResponse extends scalapb.GeneratedMessageCompanion[com.bdmplatform.api.grpc.ActivationStatusResponse] {
  implicit def messageCompanion: scalapb.GeneratedMessageCompanion[com.bdmplatform.api.grpc.ActivationStatusResponse] = this
  def fromFieldsMap(__fieldsMap: scala.collection.immutable.Map[_root_.com.google.protobuf.Descriptors.FieldDescriptor, _root_.scala.Any]): com.bdmplatform.api.grpc.ActivationStatusResponse = {
    _root_.scala.Predef.require(__fieldsMap.keys.forall(_.getContainingType() == javaDescriptor), "FieldDescriptor does not match message type.")
    val __fields = javaDescriptor.getFields
    com.bdmplatform.api.grpc.ActivationStatusResponse(
      __fieldsMap.getOrElse(__fields.get(0), 0).asInstanceOf[_root_.scala.Int],
      __fieldsMap.getOrElse(__fields.get(1), 0).asInstanceOf[_root_.scala.Int],
      __fieldsMap.getOrElse(__fields.get(2), 0).asInstanceOf[_root_.scala.Int],
      __fieldsMap.getOrElse(__fields.get(3), 0).asInstanceOf[_root_.scala.Int],
      __fieldsMap.getOrElse(__fields.get(4), Nil).asInstanceOf[_root_.scala.collection.Seq[com.bdmplatform.api.grpc.FeatureActivationStatus]]
    )
  }
  implicit def messageReads: _root_.scalapb.descriptors.Reads[com.bdmplatform.api.grpc.ActivationStatusResponse] = _root_.scalapb.descriptors.Reads{
    case _root_.scalapb.descriptors.PMessage(__fieldsMap) =>
      _root_.scala.Predef.require(__fieldsMap.keys.forall(_.containingMessage == scalaDescriptor), "FieldDescriptor does not match message type.")
      com.bdmplatform.api.grpc.ActivationStatusResponse(
        __fieldsMap.get(scalaDescriptor.findFieldByNumber(1).get).map(_.as[_root_.scala.Int]).getOrElse(0),
        __fieldsMap.get(scalaDescriptor.findFieldByNumber(2).get).map(_.as[_root_.scala.Int]).getOrElse(0),
        __fieldsMap.get(scalaDescriptor.findFieldByNumber(3).get).map(_.as[_root_.scala.Int]).getOrElse(0),
        __fieldsMap.get(scalaDescriptor.findFieldByNumber(4).get).map(_.as[_root_.scala.Int]).getOrElse(0),
        __fieldsMap.get(scalaDescriptor.findFieldByNumber(5).get).map(_.as[_root_.scala.collection.Seq[com.bdmplatform.api.grpc.FeatureActivationStatus]]).getOrElse(_root_.scala.collection.Seq.empty)
      )
    case _ => throw new RuntimeException("Expected PMessage")
  }
  def javaDescriptor: _root_.com.google.protobuf.Descriptors.Descriptor = BlockchainApiProto.javaDescriptor.getMessageTypes.get(1)
  def scalaDescriptor: _root_.scalapb.descriptors.Descriptor = BlockchainApiProto.scalaDescriptor.messages(1)
  def messageCompanionForFieldNumber(__number: _root_.scala.Int): _root_.scalapb.GeneratedMessageCompanion[_] = {
    var __out: _root_.scalapb.GeneratedMessageCompanion[_] = null
    (__number: @_root_.scala.unchecked) match {
      case 5 => __out = com.bdmplatform.api.grpc.FeatureActivationStatus
    }
    __out
  }
  lazy val nestedMessagesCompanions: Seq[_root_.scalapb.GeneratedMessageCompanion[_]] = Seq.empty
  def enumCompanionForFieldNumber(__fieldNumber: _root_.scala.Int): _root_.scalapb.GeneratedEnumCompanion[_] = throw new MatchError(__fieldNumber)
  lazy val defaultInstance = com.bdmplatform.api.grpc.ActivationStatusResponse(
  )
  implicit class ActivationStatusResponseLens[UpperPB](_l: _root_.scalapb.lenses.Lens[UpperPB, com.bdmplatform.api.grpc.ActivationStatusResponse]) extends _root_.scalapb.lenses.ObjectLens[UpperPB, com.bdmplatform.api.grpc.ActivationStatusResponse](_l) {
    def height: _root_.scalapb.lenses.Lens[UpperPB, _root_.scala.Int] = field(_.height)((c_, f_) => c_.copy(height = f_))
    def votingInterval: _root_.scalapb.lenses.Lens[UpperPB, _root_.scala.Int] = field(_.votingInterval)((c_, f_) => c_.copy(votingInterval = f_))
    def votingThreshold: _root_.scalapb.lenses.Lens[UpperPB, _root_.scala.Int] = field(_.votingThreshold)((c_, f_) => c_.copy(votingThreshold = f_))
    def nextCheck: _root_.scalapb.lenses.Lens[UpperPB, _root_.scala.Int] = field(_.nextCheck)((c_, f_) => c_.copy(nextCheck = f_))
    def features: _root_.scalapb.lenses.Lens[UpperPB, _root_.scala.collection.Seq[com.bdmplatform.api.grpc.FeatureActivationStatus]] = field(_.features)((c_, f_) => c_.copy(features = f_))
  }
  final val HEIGHT_FIELD_NUMBER = 1
  final val VOTING_INTERVAL_FIELD_NUMBER = 2
  final val VOTING_THRESHOLD_FIELD_NUMBER = 3
  final val NEXT_CHECK_FIELD_NUMBER = 4
  final val FEATURES_FIELD_NUMBER = 5
  def of(
    height: _root_.scala.Int,
    votingInterval: _root_.scala.Int,
    votingThreshold: _root_.scala.Int,
    nextCheck: _root_.scala.Int,
    features: _root_.scala.collection.Seq[com.bdmplatform.api.grpc.FeatureActivationStatus]
  ): _root_.com.bdmplatform.api.grpc.ActivationStatusResponse = _root_.com.bdmplatform.api.grpc.ActivationStatusResponse(
    height,
    votingInterval,
    votingThreshold,
    nextCheck,
    features
  )
}
