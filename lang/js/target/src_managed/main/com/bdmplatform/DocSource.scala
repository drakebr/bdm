
 package com.bdmplatform

 object DocSource {
   private val regex = "\\[(.+?)\\]\\(.+?\\)".r

   lazy val varData  = Map((("FLOOR", 1), ("'FLOOR' rounding mode")), (("tx", 1), ("Processing transaction")), (("HALFEVEN", 1), ("'HALF_EVEN' rounding mode")), (("UP", 1), ("'UP' rounding mode")), (("unit", 1), ("Single instance value")), (("CEILING", 1), ("'CEILING' rounding mode")), (("HALFUP", 1), ("'HALF_UP' rounding mode")), (("DOWN", 1), ("'DOWN' rounding mode")), (("HALFDOWN", 1), ("'HALF_DOWN' rounding mode")), (("height", 1), ("Current blockchain height"))) ++ Map((("HALFUP", 2), ("'HALF_UP' rounding mode")), (("FLOOR", 2), ("'FLOOR' rounding mode")), (("tx", 2), ("Processing transaction")), (("height", 2), ("Current blockchain height")), (("CEILING", 2), ("'CEILING' rounding mode")), (("DOWN", 2), ("'DOWN' rounding mode")), (("unit", 2), ("Single instance value")), (("Sell", 2), ("Sell OrderType")), (("Buy", 2), ("Buy OrderType")), (("HALFEVEN", 2), ("'HALF_EVEN' rounding mode")), (("UP", 2), ("'UP' rounding mode")), (("HALFDOWN", 2), ("'HALF_DOWN' rounding mode"))) ++ Map((("this", 3), ("Script address")), (("HALFDOWN", 3), ("'HALF_DOWN' rounding mode")), (("SHA224", 3), ("SHA224 digest algorithm")), (("SHA3256", 3), ("SHA3-256 digest algorithm")), (("Sell", 3), ("Sell OrderType")), (("SHA3224", 3), ("SHA3-224 digest algorithm")), (("MD5", 3), ("MD5 digest algorithm")), (("NOALG", 3), ("NONE digest algorithm")), (("SHA3512", 3), ("SHA3-512 digest algorithm")), (("SHA1", 3), ("SHA1 digest algorithm")), (("Buy", 3), ("Buy OrderType")), (("height", 3), ("Current blockchain height")), (("SHA256", 3), ("SHA256 digest algorithm")), (("DOWN", 3), ("'DOWN' rounding mode")), (("FLOOR", 3), ("'FLOOR' rounding mode")), (("SHA3384", 3), ("SHA3-384 digest algorithm")), (("CEILING", 3), ("'CEILING' rounding mode")), (("tx", 3), ("Processing transaction")), (("HALFUP", 3), ("'HALF_UP' rounding mode")), (("SHA384", 3), ("SHA384 digest algorithm")), (("UP", 3), ("'UP' rounding mode")), (("lastBlock", 3), ("Last block info")), (("nil", 3), ("empty list of any type")), (("SHA512", 3), ("SHA512 digest algorithm")), (("HALFEVEN", 3), ("'HALF_EVEN' rounding mode")), (("unit", 3), ("Single instance value")))
   lazy val funcData = Map((("-", List("Int"), 1), ("Change integer sign", List("value"))), (("+", List("ByteVector", "ByteVector"), 1), ("Limited byte vectors concatenation", List("prefix", "suffix"))), (("getString", List("Address|Alias", "String"), 1), ("get data from the account state", List("account", "key"))), (("*", List("Int", "Int"), 1), ("Integer multiplication", List("multiplier", "multiplier"))), (("addressFromPublicKey", List("ByteVector"), 1), ("Convert public key to account address", List("public key"))), (("isDefined", List("T|Unit"), 1), ("Check the value is defined", List("Option value"))), (("dropRight", List("String", "Int"), 1), ("Remove string suffix", List("string", "suffix size in characters"))), (("transactionHeightById", List("ByteVector"), 1), ("get height when transaction was stored to blockchain", List("transaction Id"))), (("assetBalance", List("Address|Alias", "ByteVector|Unit"), 1), ("get asset balance for account", List("account", "assetId (BDM if none)"))), (("+", List("Int", "Int"), 1), ("Integer sum", List("term", "term"))), (("toBase58String", List("ByteVector"), 1), ("Base58 encode", List("value"))), (("!=", List("T", "T"), 1), ("Inequality", List("value", "value"))), (("_isInstanceOf", List("T", "String"), 1), ("Internal function to check value type", List("value", "type name"))), (("!", List("Boolean"), 1), ("unary negation", List("boolean"))), (("getInteger", List("Address|Alias", "String"), 1), ("get data from the account state", List("account", "key"))), (("getString", List("List[DataEntry]", "Int"), 1), ("Extract data by index", List("DataEntry list, usually tx.data", "index"))), (("fromBase58String", List("String"), 1), ("Base58 decode", List("base58 encoded string"))), (("getInteger", List("List[DataEntry]", "String"), 1), ("Find and extract data by key", List("DataEntry list, usually tx.data", "key"))), (("take", List("ByteVector", "Int"), 1), ("Take first bytes subvector", List("vector", "Bytes number"))), (("sigVerify", List("ByteVector", "ByteVector", "ByteVector"), 1), ("check signature", List("value", "signature", "public key"))), (("dropRight", List("ByteVector", "Int"), 1), ("Cut vectors tail", List("vector", "cutting size"))), (("/", List("Int", "Int"), 1), ("Integer division", List("divisible", "divisor"))), ((">", List("Int", "Int"), 1), ("Integer greater comparison", List("term", "term"))), (("sha256", List("ByteVector"), 1), ("256 bit SHA-2", List("value"))), (("toBytes", List("Boolean"), 1), ("Bytes array representation", List("value"))), (("drop", List("String", "Int"), 1), ("Remove string prefix", List("string", "prefix size"))), (("keccak256", List("ByteVector"), 1), ("256 bit Keccak/SHA-3/TIPS-202", List("value"))), (("drop", List("ByteVector", "Int"), 1), ("Skip first bytes", List("vector", "Bytes number"))), (("addressFromRecipient", List("Address|Alias"), 1), ("Extract address or lookup alias", List("address or alias, usually tx.recipient"))), (("==", List("T", "T"), 1), ("Equality", List("value", "value"))), (("getBoolean", List("List[DataEntry]", "String"), 1), ("Find and extract data by key", List("DataEntry list, usually tx.data", "key"))), (("size", List("List[T]"), 1), ("Size of list", List("list"))), (("addressFromString", List("String"), 1), ("Decode account address", List("string address representation"))), (("+", List("String", "String"), 1), ("Limited strings concatenation", List("prefix", "suffix"))), (("getInteger", List("List[DataEntry]", "Int"), 1), ("Extract data by index", List("DataEntry list, usually tx.data", "index"))), (("size", List("String"), 1), ("String size in characters", List("string"))), (("-", List("Int", "Int"), 1), ("Integer substitution", List("term", "term"))), (("extract", List("T|Unit"), 1), ("Extract value from option or fail", List("Optional value"))), (("fromBase64String", List("String"), 1), ("Base64 decode", List("base64 encoded string"))), (("getString", List("List[DataEntry]", "String"), 1), ("Find and extract data by key", List("DataEntry list, usually tx.data", "key"))), (("getElement", List("List[T]", "Int"), 1), ("Get list element by position", List("list", "element position"))), (("toBytes", List("String"), 1), ("Bytes array representation", List("value"))), (("getBinary", List("List[DataEntry]", "Int"), 1), ("Extract data by index", List("DataEntry list, usually tx.data", "index"))), (("getBinary", List("Address|Alias", "String"), 1), ("get data from the account state", List("account", "key"))), (("getBoolean", List("Address|Alias", "String"), 1), ("get data from the account state", List("account", "key"))), (("toBase64String", List("ByteVector"), 1), ("Base64 encode", List("value"))), (("size", List("ByteVector"), 1), ("Size of bytes str", List("vector"))), (("getBoolean", List("List[DataEntry]", "Int"), 1), ("Extract data by index", List("DataEntry list, usually tx.data", "index"))), (("bdmBalance", List("Address|Alias"), 1), ("get BDM balance for account", List("account"))), (("fraction", List("Int", "Int", "Int"), 1), ("Multiply and division with big integer intermediate representation", List("multiplier", "multiplier", "divisor"))), (("toString", List("Int"), 1), ("String representation", List("value"))), (("takeRight", List("ByteVector", "Int"), 1), ("Take vector tail", List("vector", "taking size"))), ((">=", List("Int", "Int"), 1), ("Integer greater or equal comparison", List("term", "term"))), (("throw", List("String"), 1), ("Fail script", List("Error message"))), (("getBinary", List("List[DataEntry]", "String"), 1), ("Find and extract data by key", List("DataEntry list, usually tx.data", "key"))), (("transactionById", List("ByteVector"), 1), ("Lookup transaction", List("transaction Id"))), (("takeRight", List("String", "Int"), 1), ("Take string suffix", List("String", "suffix size in characters"))), (("%", List("Int", "Int"), 1), ("Modulo", List("divisible", "divisor"))), (("take", List("String", "Int"), 1), ("Take string prefix", List("string", "prefix size in characters"))), (("toBytes", List("Int"), 1), ("Bytes array representation", List("value"))), (("throw", List(), 1), ("Fail script", List())), (("blake2b256", List("ByteVector"), 1), ("256 bit BLAKE", List("value"))), (("toString", List("Boolean"), 1), ("String representation", List("value")))) ++ Map((("getElement", List("List[T]", "Int"), 2), ("Get list element by position", List("list", "element position"))), ((">=", List("Int", "Int"), 2), ("Integer greater or equal comparison", List("term", "term"))), ((">", List("Int", "Int"), 2), ("Integer greater comparison", List("term", "term"))), (("fraction", List("Int", "Int", "Int"), 2), ("Multiply and division with big integer intermediate representation", List("multiplier", "multiplier", "divisor"))), (("getInteger", List("Address|Alias", "String"), 2), ("get data from the account state", List("account", "key"))), (("takeRight", List("String", "Int"), 2), ("Take string suffix", List("String", "suffix size in characters"))), (("dropRight", List("String", "Int"), 2), ("Remove string suffix", List("string", "suffix size in characters"))), (("%", List("Int", "Int"), 2), ("Modulo", List("divisible", "divisor"))), (("size", List("String"), 2), ("String size in characters", List("string"))), (("toBase58String", List("ByteVector"), 2), ("Base58 encode", List("value"))), (("addressFromRecipient", List("Address|Alias"), 2), ("Extract address or lookup alias", List("address or alias, usually tx.recipient"))), (("transactionHeightById", List("ByteVector"), 2), ("get height when transaction was stored to blockchain", List("transaction Id"))), (("bdmBalance", List("Address|Alias"), 2), ("get BDM balance for account", List("account"))), (("size", List("List[T]"), 2), ("Size of list", List("list"))), (("sigVerify", List("ByteVector", "ByteVector", "ByteVector"), 2), ("check signature", List("value", "signature", "public key"))), (("keccak256", List("ByteVector"), 2), ("256 bit Keccak/SHA-3/TIPS-202", List("value"))), (("getBinary", List("List[DataEntry]", "Int"), 2), ("Extract data by index", List("DataEntry list, usually tx.data", "index"))), (("==", List("T", "T"), 2), ("Equality", List("value", "value"))), (("getInteger", List("List[DataEntry]", "String"), 2), ("Find and extract data by key", List("DataEntry list, usually tx.data", "key"))), (("toBytes", List("Boolean"), 2), ("Bytes array representation", List("value"))), (("throw", List(), 2), ("Fail script", List())), (("takeRight", List("ByteVector", "Int"), 2), ("Take vector tail", List("vector", "taking size"))), (("toBase64String", List("ByteVector"), 2), ("Base64 encode", List("value"))), (("addressFromPublicKey", List("ByteVector"), 2), ("Convert public key to account address", List("public key"))), (("-", List("Int"), 2), ("Change integer sign", List("value"))), (("toString", List("Int"), 2), ("String representation", List("value"))), (("!=", List("T", "T"), 2), ("Inequality", List("value", "value"))), (("isDefined", List("T|Unit"), 2), ("Check the value is defined", List("Option value"))), (("+", List("String", "String"), 2), ("Limited strings concatenation", List("prefix", "suffix"))), (("take", List("ByteVector", "Int"), 2), ("Take first bytes subvector", List("vector", "Bytes number"))), (("transactionById", List("ByteVector"), 2), ("Lookup transaction", List("transaction Id"))), (("getInteger", List("List[DataEntry]", "Int"), 2), ("Extract data by index", List("DataEntry list, usually tx.data", "index"))), (("+", List("Int", "Int"), 2), ("Integer sum", List("term", "term"))), (("take", List("String", "Int"), 2), ("Take string prefix", List("string", "prefix size in characters"))), (("throw", List("String"), 2), ("Fail script", List("Error message"))), (("getBinary", List("List[DataEntry]", "String"), 2), ("Find and extract data by key", List("DataEntry list, usually tx.data", "key"))), (("assetBalance", List("Address|Alias", "ByteVector|Unit"), 2), ("get asset balance for account", List("account", "assetId (BDM if none)"))), (("toString", List("Boolean"), 2), ("String representation", List("value"))), (("getBinary", List("Address|Alias", "String"), 2), ("get data from the account state", List("account", "key"))), (("-", List("Int", "Int"), 2), ("Integer substitution", List("term", "term"))), (("+", List("ByteVector", "ByteVector"), 2), ("Limited byte vectors concatenation", List("prefix", "suffix"))), (("extract", List("T|Unit"), 2), ("Extract value from option or fail", List("Optional value"))), (("getString", List("List[DataEntry]", "Int"), 2), ("Extract data by index", List("DataEntry list, usually tx.data", "index"))), (("getBoolean", List("List[DataEntry]", "Int"), 2), ("Extract data by index", List("DataEntry list, usually tx.data", "index"))), (("!", List("Boolean"), 2), ("unary negation", List("boolean"))), (("drop", List("ByteVector", "Int"), 2), ("Skip first bytes", List("vector", "Bytes number"))), (("_isInstanceOf", List("T", "String"), 2), ("Internal function to check value type", List("value", "type name"))), (("toBytes", List("Int"), 2), ("Bytes array representation", List("value"))), (("drop", List("String", "Int"), 2), ("Remove string prefix", List("string", "prefix size"))), (("getBoolean", List("List[DataEntry]", "String"), 2), ("Find and extract data by key", List("DataEntry list, usually tx.data", "key"))), (("fromBase64String", List("String"), 2), ("Base64 decode", List("base64 encoded string"))), (("toBytes", List("String"), 2), ("Bytes array representation", List("value"))), (("size", List("ByteVector"), 2), ("Size of bytes str", List("vector"))), (("getString", List("List[DataEntry]", "String"), 2), ("Find and extract data by key", List("DataEntry list, usually tx.data", "key"))), (("/", List("Int", "Int"), 2), ("Integer division", List("divisible", "divisor"))), (("getBoolean", List("Address|Alias", "String"), 2), ("get data from the account state", List("account", "key"))), (("blake2b256", List("ByteVector"), 2), ("256 bit BLAKE", List("value"))), (("addressFromString", List("String"), 2), ("Decode account address", List("string address representation"))), (("dropRight", List("ByteVector", "Int"), 2), ("Cut vectors tail", List("vector", "cutting size"))), (("fromBase58String", List("String"), 2), ("Base58 decode", List("base58 encoded string"))), (("*", List("Int", "Int"), 2), ("Integer multiplication", List("multiplier", "multiplier"))), (("getString", List("Address|Alias", "String"), 2), ("get data from the account state", List("account", "key"))), (("sha256", List("ByteVector"), 2), ("256 bit SHA-2", List("value")))) ++ categorizedfuncData.mapValues(v => (regex.replaceAllIn(v._1, _.group(1)), v._2))
   lazy val categorizedfuncData = Map((("getBinaryValue", List("List[DataEntry]", "String"), 3), ("Find and extract data by key (fail on error)", List("DataEntry list, usually tx.data", "key"), "extracting-data-functions")), (("getBoolean", List("List[DataEntry]", "Int"), 3), ("Extract data by index", List("DataEntry list, usually tx.data", "index"), "extracting-data-functions")), (("log", List("Int", "Int", "Int", "Int", "Int", "Ceiling|Down|Floor|HalfDown|HalfEven|HalfUp|Up"), 3), ("Returns the logarithm of a number.", List("The number which logarithm should be calculated.", "The number of decimals of the number.", "The base of the logarithm.", "The number of decimals of the base.", "The number of decimals of the resulting value.", "The rounding function.\nThe HalfUp() function may be used as the default value."), "math-functions")), (("toBase64String", List("ByteVector"), 3), ("Encodes array of bytes to [Base64](https://en.wikipedia.org/wiki/Base64) string.", List("The array of bytes to encode."), "encoding-and-decoding-functions")), (("*", List("Int", "Int"), 3), ("Multiply integers.", List("Multiplier", "Multiplier"), "operators")), (("toString", List("Int"), 3), ("Converts an integer to a string.", List("The integer to convert."), "converting-functions")), (("getIntegerValue", List("List[DataEntry]", "Int"), 3), ("Extract data by index (fail on error)", List("DataEntry list, usually tx.data", "index"), "extracting-data-functions")), (("toInt", List("ByteVector"), 3), ("Converts an array of bytes to an integer.", List("The array of bytes to convert."), "converting-functions")), (("toBase16String", List("ByteVector"), 3), ("Encodes array of bytes to [Base16](https://en.wikipedia.org/wiki/Hexadecimal) string.", List("The array of bytes to encode."), "encoding-and-decoding-functions")), (("addressFromRecipient", List("Address|Alias"), 3), ("Extract address or lookup alias", List("Address or alias of the account."), "converting-functions")), (("parseIntValue", List("String"), 3), ("Converts the string representation of a number to its integer equivalent.\nRaises an exception if the string cannot be parsed.", List("The string to parse."), "converting-functions")), (("addressFromPublicKey", List("ByteVector"), 3), ("Converts account public key to [address](blockhain/address.md).", List("The public key to convert."), "converting-functions")), (("takeRight", List("ByteVector", "Int"), 3), ("Takes the last n bytes from an array of bytes.", List("The array of bytes.", "The number n."), "byte-array-functions")), (("parseInt", List("String"), 3), ("Converts the string representation of a number to its integer equivalent.", List("The string to parse."), "converting-functions")), (("split", List("String", "String"), 3), ("Splits a string delimited by a separator into a list of substrings", List("The string.", "The separator."), "string-functions")), (("getStringValue", List("List[DataEntry]", "String"), 3), ("Find and extract data by key (fail on error)", List("DataEntry list, usually tx.data", "key"), "extracting-data-functions")), (("==", List("T", "T"), 3), ("Check equality.", List("First value", "Second value"), "operators")), (("getBooleanValue", List("List[DataEntry]", "String"), 3), ("Find and extract data by key (fail on error)", List("DataEntry list, usually tx.data", "key"), "extracting-data-functions")), (("rsaVerify", List("Md5|NoAlg|Sha1|Sha224|Sha256|Sha3224|Sha3256|Sha3384|Sha3512|Sha384|Sha512", "ByteVector", "ByteVector", "ByteVector"), 3), ("Verifies an [RSA](https://en.wikipedia.org/wiki/RSA_%28cryptosystem%29) signature.", List("The RSA algorithm.", "The message.", "The signature.", "The public key."), "verification-functions")), (("blockInfoByHeight", List("Int"), 3), ("Gets the information about a [block](/blockchain/block.md) by the [block height](/blockchain/block-height.md)", List("Block height."), "blockchain-functions")), (("toString", List("Address"), 3), ("Convert address bytes to string", List("The address to convert"), "converting-functions")), (("toBytes", List("Boolean"), 3), ("Converts a boolean to an array of bytes.", List("The boolean to convert."), "converting-functions")), (("lastIndexOf", List("String", "String", "Int"), 3), ("Returns the index of the last occurrence of a substring after a certain index", List("The string.", "The substring.", "The index."), "string-functions")), (("take", List("String", "Int"), 3), ("Takes the first n characters from a string", List("The string.", "The number n."), "string-functions")), (("getBooleanValue", List("List[DataEntry]", "Int"), 3), ("Extract data by index (fail on error)", List("DataEntry list, usually tx.data", "index"), "extracting-data-functions")), (("getBooleanValue", List("Address|Alias", "String"), 3), ("Gets a boolean value by key. Throws an exception if there is no data.", List("[Address](/blockchain/address.md) or [alias](/blockchain/alias.md) of the account.", "The key."), "account-data-storage-functions")), (("pow", List("Int", "Int", "Int", "Int", "Int", "Ceiling|Down|Floor|HalfDown|HalfEven|HalfUp|Up"), 3), ("Returns a number raised to a power", List("The base.", "The number of decimals of the base.", "The exponent.", "The number of decimals of the exponent.", "The number of decimals of the resulting value.", "One of the rounding functions. The HalfUp() function may be used as the default value."), "math-functions")), (("checkMerkleProof", List("ByteVector", "ByteVector", "ByteVector"), 3), ("Verifies if a tree of hashes is part of the [Merkle tree](https://en.wikipedia.org/wiki/Merkle_tree).", List("The root hash of the Merkle tree.", "The array of bytes of the Merkle tree proof.", "The tree of hashes."), "verification-functions")), (("fromBase64String", List("String"), 3), ("Decodes [Base64](https://en.wikipedia.org/wiki/Base64) string to an array of bytes.", List("The string to decode."), "encoding-and-decoding-functions")), (("+", List("ByteVector", "ByteVector"), 3), ("Concat limited byte vectors.", List("First value", "Second value"), "operators")), ((">", List("Int", "Int"), 3), ("Check if integer greater comparison.", List("First value", "Second value"), "operators")), (("getBinaryValue", List("List[DataEntry]", "Int"), 3), ("Extract data by index (fail on error)", List("DataEntry list, usually tx.data", "index"), "extracting-data-functions")), (("sha256", List("ByteVector"), 3), ("[SHA-256](https://en.wikipedia.org/wiki/SHA-2) hash function.", List("The array of bytes to encode."), "encoding-and-decoding-functions")), (("indexOf", List("String", "String", "Int"), 3), ("Returns the index of the first occurrence of a substring after a certain index", List("The string.", "The substring.", "The index."), "string-functions")), (("isDefined", List("T|Unit"), 3), ("Checks if a value is not `Unit`", List("Optional value"), "optional-value-functions")), (("indexOf", List("String", "String"), 3), ("Returns the index of the first occurrence of a substring", List("The string.", "The substring."), "string-functions")), (("%", List("Int", "Int"), 3), ("Calculate modulo.", List("Divisible", "Divisor"), "operators")), (("getBinary", List("Address|Alias", "String"), 3), ("Gets an array of bytes by key.", List("[Address](/blockchain/address.md) or [alias](/blockchain/alias.md) of the account.", "The key."), "account-data-storage-functions")), (("-", List("Int"), 3), ("Change integer sign.", List("Value"), "operators")), (("/", List("Int", "Int"), 3), ("Divide integers.", List("Divisible", "Divisor"), "operators")), (("fromBase16String", List("String"), 3), ("Decodes [Base16](https://en.wikipedia.org/wiki/Hexadecimal) string to an array of bytes.", List("The string to decode."), "encoding-and-decoding-functions")), (("getInteger", List("List[DataEntry]", "String"), 3), ("Find and extract data by key", List("DataEntry list, usually tx.data", "key"), "extracting-data-functions")), (("getIntegerValue", List("List[DataEntry]", "String"), 3), ("Find and extract data by key (fail on error)", List("DataEntry list, usually tx.data", "key"), "extracting-data-functions")), (("toString", List("Boolean"), 3), ("Converts a boolean to a string.", List("The boolean to convert."), "converting-functions")), (("getStringValue", List("Address|Alias", "String"), 3), ("Gets a string by key. Throws an exception if there is no data.", List("[Address](/blockchain/address.md) or [alias](/blockchain/alias.md) of the account.", "The key."), "account-data-storage-functions")), (("getElement", List("List[T]", "Int"), 3), ("Returns the size of a list.", List("The list.", "The index of the element."), "list-functions")), (("drop", List("ByteVector", "Int"), 3), ("Drops the first n bytes of an array of bytes.", List("The array of bytes.", "The number n."), "byte-array-functions")), (("getInteger", List("Address|Alias", "String"), 3), ("Gets an integer by key.", List("[Address](/blockchain/address.md) or [alias](/blockchain/alias.md) of the account.", "The key."), "account-data-storage-functions")), (("getBinary", List("List[DataEntry]", "Int"), 3), ("Extract data by index", List("DataEntry list, usually tx.data", "index"), "extracting-data-functions")), (("dropRight", List("ByteVector", "Int"), 3), ("Drops the first n bytes of an array of bytes.", List("The array of bytes.", "The number n."), "byte-array-functions")), (("size", List("String"), 3), ("Returns the size of a string", List("The string."), "string-functions")), (("blake2b256", List("ByteVector"), 3), ("[BLAKE-256](https://en.wikipedia.org/wiki/BLAKE_%28hash_function%29) hash function.", List("The array of bytes to encode."), "encoding-and-decoding-functions")), (("-", List("Int", "Int"), 3), ("Substitute integers.", List("First value", "Second value"), "operators")), (("transactionHeightById", List("ByteVector"), 3), ("Gets the [block height](/blockchain/block-height.md) of a transaction.", List("ID of the transaction."), "blockchain-functions")), (("getBinaryValue", List("Address|Alias", "String"), 3), ("Gets an array of bytes by key. Throws an exception if there is no data.", List("[Address](/blockchain/address.md) or [alias](/blockchain/alias.md) of the account.", "The key."), "account-data-storage-functions")), (("toInt", List("ByteVector", "Int"), 3), ("Converts an array of bytes to an integer starting from a certain index.", List("The array of bytes to convert.", "The index to start from."), "converting-functions")), (("toBytes", List("String"), 3), ("Converts a string to an array of bytes.", List("The string to convert."), "converting-functions")), (("assetInfo", List("ByteVector"), 3), ("Gets the information about a [token](/blockchain/token.md).", List("ID of the [token](/blockchain/token.md)."), "blockchain-functions")), (("getString", List("Address|Alias", "String"), 3), ("Gets a string by key.", List("[Address](/blockchain/address.md) or [alias](/blockchain/alias.md) of the account.", "The key."), "account-data-storage-functions")), (("fromBase58String", List("String"), 3), ("Decodes [Base58](https://en.wikipedia.org/wiki/Base58) string to an array of bytes.", List("The string to decode."), "encoding-and-decoding-functions")), (("toBytes", List("Int"), 3), ("Converts an integer to an array of bytes.", List("The integer to convert."), "converting-functions")), (("getString", List("List[DataEntry]", "Int"), 3), ("Extract data by index", List("DataEntry list, usually tx.data", "index"), "extracting-data-functions")), (("+", List("String", "String"), 3), ("Concat limited strings.", List("First value", "Second value"), "operators")), (("takeRight", List("String", "Int"), 3), ("Takes the last n characters from a string", List("The string.", "The number n."), "string-functions")), (("sigVerify", List("ByteVector", "ByteVector", "ByteVector"), 3), ("Verifies a [Curve25519](https://en.wikipedia.org/wiki/Curve25519) signature.", List("The message.", "The signature.", "The account public key."), "verification-functions")), (("value", List("T|Unit"), 3), ("Extract value from option or fail", List("Optional value"), "optional-value-functions")), (("bdmBalance", List("Address|Alias"), 3), ("Gets account balance in [BDM](/blockchain/token/bdm.md).", List("[Address](/blockchain/address.md) or [alias](/blockchain/alias.md) of the account."), "account-data-storage-functions")), (("!=", List("T", "T"), 3), ("Check inequality.", List("First value", "Second value"), "operators")), (("transferTransactionById", List("ByteVector"), 3), ("Gets the data of a transfer transaction.", List("ID of the transfer transaction."), "blockchain-functions")), (("size", List("ByteVector"), 3), ("Returns the size of an array of bytes.", List("The array of bytes."), "byte-array-functions")), (("dropRight", List("String", "Int"), 3), ("Drops the last n characters of a string", List("The string.", "The number n."), "string-functions")), (("getBoolean", List("List[DataEntry]", "String"), 3), ("Find and extract data by key", List("DataEntry list, usually tx.data", "key"), "extracting-data-functions")), (("extract", List("T|Unit"), 3), ("Extract value from option or fail", List("Optional value"), "optional-value-functions")), (("cons", List("A", "List[B]"), 3), ("Gets an element from a list by index.", List("The element.", "The list."), "list-functions")), (("toUtf8String", List("ByteVector"), 3), ("Converts an array of bytes to a UTF-8 string.", List("The array of bytes to convert."), "converting-functions")), (("getIntegerValue", List("Address|Alias", "String"), 3), ("Gets an integer by key. Throws an exception if there is no data.", List("[Address](/blockchain/address.md) or [alias](/blockchain/alias.md) of the account.", "The key."), "account-data-storage-functions")), (("size", List("List[T]"), 3), ("Prepends a new element to the list.", List("The list."), "list-functions")), (("drop", List("String", "Int"), 3), ("Drops the first n characters of a string", List("The string.", "The number n."), "string-functions")), (("take", List("ByteVector", "Int"), 3), ("Takes the first n bytes from an array of bytes.", List("The array of bytes.", "The number n."), "byte-array-functions")), (("addressFromStringValue", List("String"), 3), ("Decodes address from [Base58](https://en.wikipedia.org/wiki/Base58) string.\nRaises an exception if the address cannot be decoded.", List("The string to decode."), "encoding-and-decoding-functions")), (("throw", List(), 3), ("Raises an exception.", List(), "exception-functions")), (("getInteger", List("List[DataEntry]", "Int"), 3), ("Extract data by index", List("DataEntry list, usually tx.data", "index"), "extracting-data-functions")), ((">=", List("Int", "Int"), 3), ("Check if integer greater or equal comparison.", List("First value", "Second value"), "operators")), (("addressFromString", List("String"), 3), ("Decodes address from [Base58](https://en.wikipedia.org/wiki/Base58) string.", List("The string to decode."), "encoding-and-decoding-functions")), (("lastIndexOf", List("String", "String"), 3), ("Returns the index of the last occurrence of a substring", List("The string.", "The substring."), "string-functions")), (("_isInstanceOf", List("T", "String"), 3), ("Check value type", List("The value", "The type name"), "internal-functions")), (("getStringValue", List("List[DataEntry]", "Int"), 3), ("Extract data by index (fail on error)", List("DataEntry list, usually tx.data", "index"), "extracting-data-functions")), (("!", List("Boolean"), 3), ("Unary negation.", List("Value"), "operators")), (("throw", List("String"), 3), ("Raises an exception with a message.", List("The exception message."), "exception-functions")), (("keccak256", List("ByteVector"), 3), ("[SHA-3-256](https://en.wikipedia.org/wiki/SHA-3) hash function.", List("The array of bytes to encode."), "encoding-and-decoding-functions")), (("getBoolean", List("Address|Alias", "String"), 3), ("Gets a boolean value by key.", List("[Address](/blockchain/address.md) or [alias](/blockchain/alias.md) of the account.", "The key."), "account-data-storage-functions")), (("assetBalance", List("Address|Alias", "ByteVector|Unit"), 3), ("Gets account balance by token ID.", List("[Address](/blockchain/address.md) or [alias](/blockchain/alias.md) of the account.", "Token ID."), "account-data-storage-functions")), (("toBase58String", List("ByteVector"), 3), ("Encodes array of bytes to [Base58](https://en.wikipedia.org/wiki/Base58) string.", List("The array of bytes to encode."), "encoding-and-decoding-functions")), (("getString", List("List[DataEntry]", "String"), 3), ("Find and extract data by key", List("DataEntry list, usually tx.data", "key"), "extracting-data-functions")), (("valueOrErrorMessage", List("T|Unit", "String"), 3), ("Extract value from option or fail with message", List("Optional value", "Error message"), "optional-value-functions")), (("+", List("Int", "Int"), 3), ("Sum integers.", List("First value", "Second value"), "operators")), (("getBinary", List("List[DataEntry]", "String"), 3), ("Find and extract data by key", List("DataEntry list, usually tx.data", "key"), "extracting-data-functions")), (("fraction", List("Int", "Int", "Int"), 3), ("Multiply and division with big integer intermediate representation", List("Multiplier", "Multiplier", "Divisor"), "math-functions")))
 }
      